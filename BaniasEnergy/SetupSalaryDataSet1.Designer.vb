'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("SetupSalaryDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class SetupSalaryDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableSetupTax As SetupTaxDataTable
    
    Private tableTypeSpecializeValues As TypeSpecializeValuesDataTable
    
    Private tableMutableSetting As MutableSettingDataTable
    
    Private tableSpecializeValues As SpecializeValuesDataTable
    
    Private tableRestorePoints As RestorePointsDataTable
    
    Private tableSalaryConstants As SalaryConstantsDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, False)
        If (Me.IsBinarySerialized(info, context) = True) Then
            Me.InitVars(False)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("SetupTax")) Is Nothing) Then
                MyBase.Tables.Add(New SetupTaxDataTable(ds.Tables("SetupTax")))
            End If
            If (Not (ds.Tables("TypeSpecializeValues")) Is Nothing) Then
                MyBase.Tables.Add(New TypeSpecializeValuesDataTable(ds.Tables("TypeSpecializeValues")))
            End If
            If (Not (ds.Tables("MutableSetting")) Is Nothing) Then
                MyBase.Tables.Add(New MutableSettingDataTable(ds.Tables("MutableSetting")))
            End If
            If (Not (ds.Tables("SpecializeValues")) Is Nothing) Then
                MyBase.Tables.Add(New SpecializeValuesDataTable(ds.Tables("SpecializeValues")))
            End If
            If (Not (ds.Tables("RestorePoints")) Is Nothing) Then
                MyBase.Tables.Add(New RestorePointsDataTable(ds.Tables("RestorePoints")))
            End If
            If (Not (ds.Tables("SalaryConstants")) Is Nothing) Then
                MyBase.Tables.Add(New SalaryConstantsDataTable(ds.Tables("SalaryConstants")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Browsable(False),
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>
    Public ReadOnly Property SetupTax() As SetupTaxDataTable
        Get
            Return Me.tableSetupTax
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Browsable(False),
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>
    Public ReadOnly Property TypeSpecializeValues() As TypeSpecializeValuesDataTable
        Get
            Return Me.tableTypeSpecializeValues
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Browsable(False),
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>
    Public ReadOnly Property MutableSetting() As MutableSettingDataTable
        Get
            Return Me.tableMutableSetting
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Browsable(False),
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>
    Public ReadOnly Property SpecializeValues() As SpecializeValuesDataTable
        Get
            Return Me.tableSpecializeValues
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Browsable(False),
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>
    Public ReadOnly Property RestorePoints() As RestorePointsDataTable
        Get
            Return Me.tableRestorePoints
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Browsable(False),
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>
    Public ReadOnly Property SalaryConstants() As SalaryConstantsDataTable
        Get
            Return Me.tableSalaryConstants
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.BrowsableAttribute(True),
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As SetupSalaryDataSet = CType(MyBase.Clone, SetupSalaryDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("SetupTax")) Is Nothing) Then
                MyBase.Tables.Add(New SetupTaxDataTable(ds.Tables("SetupTax")))
            End If
            If (Not (ds.Tables("TypeSpecializeValues")) Is Nothing) Then
                MyBase.Tables.Add(New TypeSpecializeValuesDataTable(ds.Tables("TypeSpecializeValues")))
            End If
            If (Not (ds.Tables("MutableSetting")) Is Nothing) Then
                MyBase.Tables.Add(New MutableSettingDataTable(ds.Tables("MutableSetting")))
            End If
            If (Not (ds.Tables("SpecializeValues")) Is Nothing) Then
                MyBase.Tables.Add(New SpecializeValuesDataTable(ds.Tables("SpecializeValues")))
            End If
            If (Not (ds.Tables("RestorePoints")) Is Nothing) Then
                MyBase.Tables.Add(New RestorePointsDataTable(ds.Tables("RestorePoints")))
            End If
            If (Not (ds.Tables("SalaryConstants")) Is Nothing) Then
                MyBase.Tables.Add(New SalaryConstantsDataTable(ds.Tables("SalaryConstants")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Friend Overloads Sub InitVars()
        Me.InitVars(True)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableSetupTax = CType(MyBase.Tables("SetupTax"), SetupTaxDataTable)
        If (initTable = True) Then
            If (Not (Me.tableSetupTax) Is Nothing) Then
                Me.tableSetupTax.InitVars
            End If
        End If
        Me.tableTypeSpecializeValues = CType(MyBase.Tables("TypeSpecializeValues"), TypeSpecializeValuesDataTable)
        If (initTable = True) Then
            If (Not (Me.tableTypeSpecializeValues) Is Nothing) Then
                Me.tableTypeSpecializeValues.InitVars
            End If
        End If
        Me.tableMutableSetting = CType(MyBase.Tables("MutableSetting"), MutableSettingDataTable)
        If (initTable = True) Then
            If (Not (Me.tableMutableSetting) Is Nothing) Then
                Me.tableMutableSetting.InitVars
            End If
        End If
        Me.tableSpecializeValues = CType(MyBase.Tables("SpecializeValues"), SpecializeValuesDataTable)
        If (initTable = True) Then
            If (Not (Me.tableSpecializeValues) Is Nothing) Then
                Me.tableSpecializeValues.InitVars
            End If
        End If
        Me.tableRestorePoints = CType(MyBase.Tables("RestorePoints"), RestorePointsDataTable)
        If (initTable = True) Then
            If (Not (Me.tableRestorePoints) Is Nothing) Then
                Me.tableRestorePoints.InitVars
            End If
        End If
        Me.tableSalaryConstants = CType(MyBase.Tables("SalaryConstants"), SalaryConstantsDataTable)
        If (initTable = True) Then
            If (Not (Me.tableSalaryConstants) Is Nothing) Then
                Me.tableSalaryConstants.InitVars
            End If
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Private Sub InitClass()
        Me.DataSetName = "SetupSalaryDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/SetupSalaryDataSet.xsd"
        Me.EnforceConstraints = True
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableSetupTax = New SetupTaxDataTable()
        MyBase.Tables.Add(Me.tableSetupTax)
        Me.tableTypeSpecializeValues = New TypeSpecializeValuesDataTable()
        MyBase.Tables.Add(Me.tableTypeSpecializeValues)
        Me.tableMutableSetting = New MutableSettingDataTable()
        MyBase.Tables.Add(Me.tableMutableSetting)
        Me.tableSpecializeValues = New SpecializeValuesDataTable()
        MyBase.Tables.Add(Me.tableSpecializeValues)
        Me.tableRestorePoints = New RestorePointsDataTable()
        MyBase.Tables.Add(Me.tableRestorePoints)
        Me.tableSalaryConstants = New SalaryConstantsDataTable()
        MyBase.Tables.Add(Me.tableSalaryConstants)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Private Function ShouldSerializeSetupTax() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Private Function ShouldSerializeTypeSpecializeValues() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Private Function ShouldSerializeMutableSetting() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Private Function ShouldSerializeSpecializeValues() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Private Function ShouldSerializeRestorePoints() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Private Function ShouldSerializeSalaryConstants() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As SetupSalaryDataSet = New SetupSalaryDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                    AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Delegate Sub SetupTaxRowChangeEventHandler(ByVal sender As Object, ByVal e As SetupTaxRowChangeEvent)

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Delegate Sub TypeSpecializeValuesRowChangeEventHandler(ByVal sender As Object, ByVal e As TypeSpecializeValuesRowChangeEvent)

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Delegate Sub MutableSettingRowChangeEventHandler(ByVal sender As Object, ByVal e As MutableSettingRowChangeEvent)

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Delegate Sub SpecializeValuesRowChangeEventHandler(ByVal sender As Object, ByVal e As SpecializeValuesRowChangeEvent)

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Delegate Sub RestorePointsRowChangeEventHandler(ByVal sender As Object, ByVal e As RestorePointsRowChangeEvent)

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Delegate Sub SalaryConstantsRowChangeEventHandler(ByVal sender As Object, ByVal e As SalaryConstantsRowChangeEvent)

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
    Partial Public Class SetupTaxDataTable
        Inherits Global.System.Data.TypedTableBase(Of SetupTaxRow)

        Private columnTaxationID As Global.System.Data.DataColumn

        Private columnTaxImmunity As Global.System.Data.DataColumn

        Private columnTax1 As Global.System.Data.DataColumn

        Private columnTax2 As Global.System.Data.DataColumn

        Private columnTax3 As Global.System.Data.DataColumn

        Private columnTax4 As Global.System.Data.DataColumn

        Private columnTax5 As Global.System.Data.DataColumn

        Private columnTax6 As Global.System.Data.DataColumn

        Private columnTax7 As Global.System.Data.DataColumn

        Private columnTax8 As Global.System.Data.DataColumn

        Private columnPtax1 As Global.System.Data.DataColumn

        Private columnPtax2 As Global.System.Data.DataColumn

        Private columnPtax3 As Global.System.Data.DataColumn

        Private columnPtax4 As Global.System.Data.DataColumn

        Private columnPtax5 As Global.System.Data.DataColumn

        Private columnPtax6 As Global.System.Data.DataColumn

        Private columnPtax7 As Global.System.Data.DataColumn

        Private columnPtax8 As Global.System.Data.DataColumn

        Private columnUserID As Global.System.Data.DataColumn

        Private columnLastModify As Global.System.Data.DataColumn

        Private columnCreateDate As Global.System.Data.DataColumn

        Private columnControlID As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub New()
            MyBase.New
            Me.TableName = "SetupTax"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property TaxationIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTaxationID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property TaxImmunityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTaxImmunity
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Tax1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTax1
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Tax2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTax2
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Tax3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTax3
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Tax4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTax4
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Tax5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTax5
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Tax6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTax6
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Tax7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTax7
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Tax8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTax8
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Ptax1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPtax1
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Ptax2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPtax2
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Ptax3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPtax3
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Ptax4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPtax4
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Ptax5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPtax5
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Ptax6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPtax6
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Ptax7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPtax7
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Ptax8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPtax8
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property LastModifyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastModify
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property CreateDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property ControlIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnControlID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Browsable(False)>
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Default Public ReadOnly Property Item(ByVal index As Integer) As SetupTaxRow
            Get
                Return CType(Me.Rows(index), SetupTaxRow)
            End Get
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event SetupTaxRowChanging As SetupTaxRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event SetupTaxRowChanged As SetupTaxRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event SetupTaxRowDeleting As SetupTaxRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event SetupTaxRowDeleted As SetupTaxRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overloads Sub AddSetupTaxRow(ByVal row As SetupTaxRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overloads Function AddSetupTaxRow(
                    ByVal TaxationID As Integer,
                    ByVal TaxImmunity As Integer,
                    ByVal Tax1 As Integer,
                    ByVal Tax2 As Integer,
                    ByVal Tax3 As Integer,
                    ByVal Tax4 As Integer,
                    ByVal Tax5 As Integer,
                    ByVal Tax6 As Integer,
                    ByVal Tax7 As Integer,
                    ByVal Tax8 As Integer,
                    ByVal Ptax1 As Integer,
                    ByVal Ptax2 As Integer,
                    ByVal Ptax3 As Integer,
                    ByVal Ptax4 As Integer,
                    ByVal Ptax5 As Integer,
                    ByVal Ptax6 As Integer,
                    ByVal Ptax7 As Integer,
                    ByVal Ptax8 As Integer,
                    ByVal UserID As Integer,
                    ByVal LastModify As String,
                    ByVal CreateDate As String,
                    ByVal ControlID As Integer) As SetupTaxRow
            Dim rowSetupTaxRow As SetupTaxRow = CType(Me.NewRow, SetupTaxRow)
            Dim columnValuesArray() As Object = New Object() {TaxationID, TaxImmunity, Tax1, Tax2, Tax3, Tax4, Tax5, Tax6, Tax7, Tax8, Ptax1, Ptax2, Ptax3, Ptax4, Ptax5, Ptax6, Ptax7, Ptax8, UserID, LastModify, CreateDate, ControlID}
            rowSetupTaxRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSetupTaxRow)
            Return rowSetupTaxRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function FindByTaxationID(ByVal TaxationID As Integer) As SetupTaxRow
            Return CType(Me.Rows.Find(New Object() {TaxationID}), SetupTaxRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SetupTaxDataTable = CType(MyBase.Clone, SetupTaxDataTable)
            cln.InitVars
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SetupTaxDataTable()
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub InitVars()
            Me.columnTaxationID = MyBase.Columns("TaxationID")
            Me.columnTaxImmunity = MyBase.Columns("TaxImmunity")
            Me.columnTax1 = MyBase.Columns("Tax1")
            Me.columnTax2 = MyBase.Columns("Tax2")
            Me.columnTax3 = MyBase.Columns("Tax3")
            Me.columnTax4 = MyBase.Columns("Tax4")
            Me.columnTax5 = MyBase.Columns("Tax5")
            Me.columnTax6 = MyBase.Columns("Tax6")
            Me.columnTax7 = MyBase.Columns("Tax7")
            Me.columnTax8 = MyBase.Columns("Tax8")
            Me.columnPtax1 = MyBase.Columns("Ptax1")
            Me.columnPtax2 = MyBase.Columns("Ptax2")
            Me.columnPtax3 = MyBase.Columns("Ptax3")
            Me.columnPtax4 = MyBase.Columns("Ptax4")
            Me.columnPtax5 = MyBase.Columns("Ptax5")
            Me.columnPtax6 = MyBase.Columns("Ptax6")
            Me.columnPtax7 = MyBase.Columns("Ptax7")
            Me.columnPtax8 = MyBase.Columns("Ptax8")
            Me.columnUserID = MyBase.Columns("UserID")
            Me.columnLastModify = MyBase.Columns("LastModify")
            Me.columnCreateDate = MyBase.Columns("CreateDate")
            Me.columnControlID = MyBase.Columns("ControlID")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Sub InitClass()
            Me.columnTaxationID = New Global.System.Data.DataColumn("TaxationID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaxationID)
            Me.columnTaxImmunity = New Global.System.Data.DataColumn("TaxImmunity", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaxImmunity)
            Me.columnTax1 = New Global.System.Data.DataColumn("Tax1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTax1)
            Me.columnTax2 = New Global.System.Data.DataColumn("Tax2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTax2)
            Me.columnTax3 = New Global.System.Data.DataColumn("Tax3", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTax3)
            Me.columnTax4 = New Global.System.Data.DataColumn("Tax4", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTax4)
            Me.columnTax5 = New Global.System.Data.DataColumn("Tax5", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTax5)
            Me.columnTax6 = New Global.System.Data.DataColumn("Tax6", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTax6)
            Me.columnTax7 = New Global.System.Data.DataColumn("Tax7", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTax7)
            Me.columnTax8 = New Global.System.Data.DataColumn("Tax8", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTax8)
            Me.columnPtax1 = New Global.System.Data.DataColumn("Ptax1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPtax1)
            Me.columnPtax2 = New Global.System.Data.DataColumn("Ptax2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPtax2)
            Me.columnPtax3 = New Global.System.Data.DataColumn("Ptax3", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPtax3)
            Me.columnPtax4 = New Global.System.Data.DataColumn("Ptax4", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPtax4)
            Me.columnPtax5 = New Global.System.Data.DataColumn("Ptax5", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPtax5)
            Me.columnPtax6 = New Global.System.Data.DataColumn("Ptax6", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPtax6)
            Me.columnPtax7 = New Global.System.Data.DataColumn("Ptax7", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPtax7)
            Me.columnPtax8 = New Global.System.Data.DataColumn("Ptax8", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPtax8)
            Me.columnUserID = New Global.System.Data.DataColumn("UserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserID)
            Me.columnLastModify = New Global.System.Data.DataColumn("LastModify", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastModify)
            Me.columnCreateDate = New Global.System.Data.DataColumn("CreateDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreateDate)
            Me.columnControlID = New Global.System.Data.DataColumn("ControlID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnControlID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTaxationID}, True))
            Me.columnTaxationID.AllowDBNull = False
            Me.columnTaxationID.Unique = True
            Me.columnTaxImmunity.DefaultValue = CType(0, Integer)
            Me.columnTax1.DefaultValue = CType(0, Integer)
            Me.columnTax2.DefaultValue = CType(0, Integer)
            Me.columnTax3.DefaultValue = CType(0, Integer)
            Me.columnTax4.DefaultValue = CType(0, Integer)
            Me.columnTax5.DefaultValue = CType(0, Integer)
            Me.columnTax6.DefaultValue = CType(0, Integer)
            Me.columnTax7.DefaultValue = CType(0, Integer)
            Me.columnTax8.DefaultValue = CType(0, Integer)
            Me.columnPtax1.DefaultValue = CType(0, Integer)
            Me.columnPtax2.DefaultValue = CType(0, Integer)
            Me.columnPtax3.DefaultValue = CType(0, Integer)
            Me.columnPtax4.DefaultValue = CType(0, Integer)
            Me.columnPtax5.DefaultValue = CType(0, Integer)
            Me.columnPtax6.DefaultValue = CType(0, Integer)
            Me.columnPtax7.DefaultValue = CType(0, Integer)
            Me.columnPtax8.DefaultValue = CType(0, Integer)
            Me.columnUserID.DefaultValue = CType(1, Integer)
            Me.columnLastModify.MaxLength = 50
            Me.columnCreateDate.MaxLength = 50
            Me.columnControlID.DefaultValue = CType(1, Integer)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function NewSetupTaxRow() As SetupTaxRow
            Return CType(Me.NewRow, SetupTaxRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SetupTaxRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SetupTaxRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SetupTaxRowChangedEvent) Is Nothing) Then
                RaiseEvent SetupTaxRowChanged(Me, New SetupTaxRowChangeEvent(CType(e.Row, SetupTaxRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SetupTaxRowChangingEvent) Is Nothing) Then
                RaiseEvent SetupTaxRowChanging(Me, New SetupTaxRowChangeEvent(CType(e.Row, SetupTaxRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SetupTaxRowDeletedEvent) Is Nothing) Then
                RaiseEvent SetupTaxRowDeleted(Me, New SetupTaxRowChangeEvent(CType(e.Row, SetupTaxRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SetupTaxRowDeletingEvent) Is Nothing) Then
                RaiseEvent SetupTaxRowDeleting(Me, New SetupTaxRowChangeEvent(CType(e.Row, SetupTaxRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub RemoveSetupTaxRow(ByVal row As SetupTaxRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SetupSalaryDataSet = New SetupSalaryDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SetupTaxDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
    Partial Public Class TypeSpecializeValuesDataTable
        Inherits Global.System.Data.TypedTableBase(Of TypeSpecializeValuesRow)

        Private columnTypeSpecializeID As Global.System.Data.DataColumn

        Private columnTypeSpecializeName As Global.System.Data.DataColumn

        Private columnTypeSpecializeValue As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub New()
            MyBase.New
            Me.TableName = "TypeSpecializeValues"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property TypeSpecializeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeSpecializeID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property TypeSpecializeNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeSpecializeName
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property TypeSpecializeValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeSpecializeValue
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Browsable(False)>
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Default Public ReadOnly Property Item(ByVal index As Integer) As TypeSpecializeValuesRow
            Get
                Return CType(Me.Rows(index), TypeSpecializeValuesRow)
            End Get
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event TypeSpecializeValuesRowChanging As TypeSpecializeValuesRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event TypeSpecializeValuesRowChanged As TypeSpecializeValuesRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event TypeSpecializeValuesRowDeleting As TypeSpecializeValuesRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event TypeSpecializeValuesRowDeleted As TypeSpecializeValuesRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overloads Sub AddTypeSpecializeValuesRow(ByVal row As TypeSpecializeValuesRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overloads Function AddTypeSpecializeValuesRow(ByVal TypeSpecializeID As Integer, ByVal TypeSpecializeName As String, ByVal TypeSpecializeValue As Double) As TypeSpecializeValuesRow
            Dim rowTypeSpecializeValuesRow As TypeSpecializeValuesRow = CType(Me.NewRow, TypeSpecializeValuesRow)
            Dim columnValuesArray() As Object = New Object() {TypeSpecializeID, TypeSpecializeName, TypeSpecializeValue}
            rowTypeSpecializeValuesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTypeSpecializeValuesRow)
            Return rowTypeSpecializeValuesRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function FindByTypeSpecializeID(ByVal TypeSpecializeID As Integer) As TypeSpecializeValuesRow
            Return CType(Me.Rows.Find(New Object() {TypeSpecializeID}), TypeSpecializeValuesRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TypeSpecializeValuesDataTable = CType(MyBase.Clone, TypeSpecializeValuesDataTable)
            cln.InitVars
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TypeSpecializeValuesDataTable()
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub InitVars()
            Me.columnTypeSpecializeID = MyBase.Columns("TypeSpecializeID")
            Me.columnTypeSpecializeName = MyBase.Columns("TypeSpecializeName")
            Me.columnTypeSpecializeValue = MyBase.Columns("TypeSpecializeValue")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Sub InitClass()
            Me.columnTypeSpecializeID = New Global.System.Data.DataColumn("TypeSpecializeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeSpecializeID)
            Me.columnTypeSpecializeName = New Global.System.Data.DataColumn("TypeSpecializeName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeSpecializeName)
            Me.columnTypeSpecializeValue = New Global.System.Data.DataColumn("TypeSpecializeValue", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeSpecializeValue)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTypeSpecializeID}, True))
            Me.columnTypeSpecializeID.AllowDBNull = False
            Me.columnTypeSpecializeID.Unique = True
            Me.columnTypeSpecializeName.MaxLength = 50
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function NewTypeSpecializeValuesRow() As TypeSpecializeValuesRow
            Return CType(Me.NewRow, TypeSpecializeValuesRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TypeSpecializeValuesRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TypeSpecializeValuesRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TypeSpecializeValuesRowChangedEvent) Is Nothing) Then
                RaiseEvent TypeSpecializeValuesRowChanged(Me, New TypeSpecializeValuesRowChangeEvent(CType(e.Row, TypeSpecializeValuesRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TypeSpecializeValuesRowChangingEvent) Is Nothing) Then
                RaiseEvent TypeSpecializeValuesRowChanging(Me, New TypeSpecializeValuesRowChangeEvent(CType(e.Row, TypeSpecializeValuesRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TypeSpecializeValuesRowDeletedEvent) Is Nothing) Then
                RaiseEvent TypeSpecializeValuesRowDeleted(Me, New TypeSpecializeValuesRowChangeEvent(CType(e.Row, TypeSpecializeValuesRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TypeSpecializeValuesRowDeletingEvent) Is Nothing) Then
                RaiseEvent TypeSpecializeValuesRowDeleting(Me, New TypeSpecializeValuesRowChangeEvent(CType(e.Row, TypeSpecializeValuesRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub RemoveTypeSpecializeValuesRow(ByVal row As TypeSpecializeValuesRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SetupSalaryDataSet = New SetupSalaryDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TypeSpecializeValuesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
    Partial Public Class MutableSettingDataTable
        Inherits Global.System.Data.TypedTableBase(Of MutableSettingRow)

        Private columnMutableID As Global.System.Data.DataColumn

        Private columnMutableClass As Global.System.Data.DataColumn

        Private columnMutableCost As Global.System.Data.DataColumn

        Private columnMutableLimited As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub New()
            MyBase.New
            Me.TableName = "MutableSetting"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property MutableIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMutableID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property MutableClassColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMutableClass
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property MutableCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMutableCost
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property MutableLimitedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMutableLimited
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Browsable(False)>
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Default Public ReadOnly Property Item(ByVal index As Integer) As MutableSettingRow
            Get
                Return CType(Me.Rows(index), MutableSettingRow)
            End Get
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event MutableSettingRowChanging As MutableSettingRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event MutableSettingRowChanged As MutableSettingRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event MutableSettingRowDeleting As MutableSettingRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event MutableSettingRowDeleted As MutableSettingRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overloads Sub AddMutableSettingRow(ByVal row As MutableSettingRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overloads Function AddMutableSettingRow(ByVal MutableID As Integer, ByVal MutableClass As Integer, ByVal MutableCost As String, ByVal MutableLimited As Integer) As MutableSettingRow
            Dim rowMutableSettingRow As MutableSettingRow = CType(Me.NewRow, MutableSettingRow)
            Dim columnValuesArray() As Object = New Object() {MutableID, MutableClass, MutableCost, MutableLimited}
            rowMutableSettingRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMutableSettingRow)
            Return rowMutableSettingRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function FindByMutableID(ByVal MutableID As Integer) As MutableSettingRow
            Return CType(Me.Rows.Find(New Object() {MutableID}), MutableSettingRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MutableSettingDataTable = CType(MyBase.Clone, MutableSettingDataTable)
            cln.InitVars
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MutableSettingDataTable()
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub InitVars()
            Me.columnMutableID = MyBase.Columns("MutableID")
            Me.columnMutableClass = MyBase.Columns("MutableClass")
            Me.columnMutableCost = MyBase.Columns("MutableCost")
            Me.columnMutableLimited = MyBase.Columns("MutableLimited")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Sub InitClass()
            Me.columnMutableID = New Global.System.Data.DataColumn("MutableID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMutableID)
            Me.columnMutableClass = New Global.System.Data.DataColumn("MutableClass", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMutableClass)
            Me.columnMutableCost = New Global.System.Data.DataColumn("MutableCost", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMutableCost)
            Me.columnMutableLimited = New Global.System.Data.DataColumn("MutableLimited", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMutableLimited)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMutableID}, True))
            Me.columnMutableID.AllowDBNull = False
            Me.columnMutableID.Unique = True
            Me.columnMutableClass.AllowDBNull = False
            Me.columnMutableCost.AllowDBNull = False
            Me.columnMutableCost.MaxLength = 10
            Me.columnMutableLimited.AllowDBNull = False
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function NewMutableSettingRow() As MutableSettingRow
            Return CType(Me.NewRow, MutableSettingRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MutableSettingRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MutableSettingRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MutableSettingRowChangedEvent) Is Nothing) Then
                RaiseEvent MutableSettingRowChanged(Me, New MutableSettingRowChangeEvent(CType(e.Row, MutableSettingRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MutableSettingRowChangingEvent) Is Nothing) Then
                RaiseEvent MutableSettingRowChanging(Me, New MutableSettingRowChangeEvent(CType(e.Row, MutableSettingRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MutableSettingRowDeletedEvent) Is Nothing) Then
                RaiseEvent MutableSettingRowDeleted(Me, New MutableSettingRowChangeEvent(CType(e.Row, MutableSettingRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MutableSettingRowDeletingEvent) Is Nothing) Then
                RaiseEvent MutableSettingRowDeleting(Me, New MutableSettingRowChangeEvent(CType(e.Row, MutableSettingRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub RemoveMutableSettingRow(ByVal row As MutableSettingRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SetupSalaryDataSet = New SetupSalaryDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MutableSettingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
    Partial Public Class SpecializeValuesDataTable
        Inherits Global.System.Data.TypedTableBase(Of SpecializeValuesRow)

        Private columnSpecializeID As Global.System.Data.DataColumn

        Private columnSpecializeName As Global.System.Data.DataColumn

        Private columnSpecializeValue As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub New()
            MyBase.New
            Me.TableName = "SpecializeValues"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property SpecializeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpecializeID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property SpecializeNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpecializeName
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property SpecializeValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpecializeValue
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Browsable(False)>
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Default Public ReadOnly Property Item(ByVal index As Integer) As SpecializeValuesRow
            Get
                Return CType(Me.Rows(index), SpecializeValuesRow)
            End Get
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event SpecializeValuesRowChanging As SpecializeValuesRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event SpecializeValuesRowChanged As SpecializeValuesRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event SpecializeValuesRowDeleting As SpecializeValuesRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event SpecializeValuesRowDeleted As SpecializeValuesRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overloads Sub AddSpecializeValuesRow(ByVal row As SpecializeValuesRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overloads Function AddSpecializeValuesRow(ByVal SpecializeID As Integer, ByVal SpecializeName As String, ByVal SpecializeValue As Double) As SpecializeValuesRow
            Dim rowSpecializeValuesRow As SpecializeValuesRow = CType(Me.NewRow, SpecializeValuesRow)
            Dim columnValuesArray() As Object = New Object() {SpecializeID, SpecializeName, SpecializeValue}
            rowSpecializeValuesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSpecializeValuesRow)
            Return rowSpecializeValuesRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function FindBySpecializeID(ByVal SpecializeID As Integer) As SpecializeValuesRow
            Return CType(Me.Rows.Find(New Object() {SpecializeID}), SpecializeValuesRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SpecializeValuesDataTable = CType(MyBase.Clone, SpecializeValuesDataTable)
            cln.InitVars
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SpecializeValuesDataTable()
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub InitVars()
            Me.columnSpecializeID = MyBase.Columns("SpecializeID")
            Me.columnSpecializeName = MyBase.Columns("SpecializeName")
            Me.columnSpecializeValue = MyBase.Columns("SpecializeValue")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Sub InitClass()
            Me.columnSpecializeID = New Global.System.Data.DataColumn("SpecializeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpecializeID)
            Me.columnSpecializeName = New Global.System.Data.DataColumn("SpecializeName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpecializeName)
            Me.columnSpecializeValue = New Global.System.Data.DataColumn("SpecializeValue", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpecializeValue)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSpecializeID}, True))
            Me.columnSpecializeID.AllowDBNull = False
            Me.columnSpecializeID.Unique = True
            Me.columnSpecializeName.MaxLength = 50
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function NewSpecializeValuesRow() As SpecializeValuesRow
            Return CType(Me.NewRow, SpecializeValuesRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SpecializeValuesRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SpecializeValuesRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SpecializeValuesRowChangedEvent) Is Nothing) Then
                RaiseEvent SpecializeValuesRowChanged(Me, New SpecializeValuesRowChangeEvent(CType(e.Row, SpecializeValuesRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SpecializeValuesRowChangingEvent) Is Nothing) Then
                RaiseEvent SpecializeValuesRowChanging(Me, New SpecializeValuesRowChangeEvent(CType(e.Row, SpecializeValuesRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SpecializeValuesRowDeletedEvent) Is Nothing) Then
                RaiseEvent SpecializeValuesRowDeleted(Me, New SpecializeValuesRowChangeEvent(CType(e.Row, SpecializeValuesRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SpecializeValuesRowDeletingEvent) Is Nothing) Then
                RaiseEvent SpecializeValuesRowDeleting(Me, New SpecializeValuesRowChangeEvent(CType(e.Row, SpecializeValuesRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub RemoveSpecializeValuesRow(ByVal row As SpecializeValuesRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SetupSalaryDataSet = New SetupSalaryDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SpecializeValuesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
    Partial Public Class RestorePointsDataTable
        Inherits Global.System.Data.TypedTableBase(Of RestorePointsRow)

        Private columnH_Date As Global.System.Data.DataColumn

        Private columnCID As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub New()
            MyBase.New
            Me.TableName = "RestorePoints"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property H_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnH_Date
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property CIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Browsable(False)>
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Default Public ReadOnly Property Item(ByVal index As Integer) As RestorePointsRow
            Get
                Return CType(Me.Rows(index), RestorePointsRow)
            End Get
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event RestorePointsRowChanging As RestorePointsRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event RestorePointsRowChanged As RestorePointsRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event RestorePointsRowDeleting As RestorePointsRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event RestorePointsRowDeleted As RestorePointsRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overloads Sub AddRestorePointsRow(ByVal row As RestorePointsRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overloads Function AddRestorePointsRow(ByVal H_Date As String, ByVal CID As Integer) As RestorePointsRow
            Dim rowRestorePointsRow As RestorePointsRow = CType(Me.NewRow, RestorePointsRow)
            Dim columnValuesArray() As Object = New Object() {H_Date, CID}
            rowRestorePointsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRestorePointsRow)
            Return rowRestorePointsRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RestorePointsDataTable = CType(MyBase.Clone, RestorePointsDataTable)
            cln.InitVars
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RestorePointsDataTable()
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub InitVars()
            Me.columnH_Date = MyBase.Columns("H_Date")
            Me.columnCID = MyBase.Columns("CID")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Sub InitClass()
            Me.columnH_Date = New Global.System.Data.DataColumn("H_Date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnH_Date)
            Me.columnCID = New Global.System.Data.DataColumn("CID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCID)
            Me.columnH_Date.MaxLength = 17
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function NewRestorePointsRow() As RestorePointsRow
            Return CType(Me.NewRow, RestorePointsRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RestorePointsRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RestorePointsRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RestorePointsRowChangedEvent) Is Nothing) Then
                RaiseEvent RestorePointsRowChanged(Me, New RestorePointsRowChangeEvent(CType(e.Row, RestorePointsRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RestorePointsRowChangingEvent) Is Nothing) Then
                RaiseEvent RestorePointsRowChanging(Me, New RestorePointsRowChangeEvent(CType(e.Row, RestorePointsRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RestorePointsRowDeletedEvent) Is Nothing) Then
                RaiseEvent RestorePointsRowDeleted(Me, New RestorePointsRowChangeEvent(CType(e.Row, RestorePointsRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RestorePointsRowDeletingEvent) Is Nothing) Then
                RaiseEvent RestorePointsRowDeleting(Me, New RestorePointsRowChangeEvent(CType(e.Row, RestorePointsRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub RemoveRestorePointsRow(ByVal row As RestorePointsRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SetupSalaryDataSet = New SetupSalaryDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RestorePointsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
    Partial Public Class SalaryConstantsDataTable
        Inherits Global.System.Data.TypedTableBase(Of SalaryConstantsRow)

        Private columnSalaryConstID As Global.System.Data.DataColumn

        Private columnWife As Global.System.Data.DataColumn

        Private columnChild1 As Global.System.Data.DataColumn

        Private columnChild2 As Global.System.Data.DataColumn

        Private columnChild3 As Global.System.Data.DataColumn

        Private columnOtherChild As Global.System.Data.DataColumn

        Private columnTSpecialize As Global.System.Data.DataColumn

        Private columnSpecialize As Global.System.Data.DataColumn

        Private columnTypeSpecialize As Global.System.Data.DataColumn

        Private columnSocialInsurance As Global.System.Data.DataColumn

        Private columnCooperateBox As Global.System.Data.DataColumn

        Private columnCooperateBox1 As Global.System.Data.DataColumn

        Private columnCooperationWorkers As Global.System.Data.DataColumn

        Private columnEngCooperation As Global.System.Data.DataColumn

        Private columnhabitation As Global.System.Data.DataColumn

        Private columnAssistBox As Global.System.Data.DataColumn

        Private columnTypo As Global.System.Data.DataColumn

        Private columnDeathAssist As Global.System.Data.DataColumn

        Private columnEndService As Global.System.Data.DataColumn

        Private columnEngFarm As Global.System.Data.DataColumn

        Private columnstipendInsurance As Global.System.Data.DataColumn

        Private columnTaxImmunity As Global.System.Data.DataColumn

        Private columnControlID As Global.System.Data.DataColumn

        Private columnCleanerCost As Global.System.Data.DataColumn

        Private columnWorkerTax As Global.System.Data.DataColumn

        Private columnST1 As Global.System.Data.DataColumn

        Private columnST2 As Global.System.Data.DataColumn

        Private columnST3 As Global.System.Data.DataColumn

        Private columnST4 As Global.System.Data.DataColumn

        Private columnST5 As Global.System.Data.DataColumn

        Private columnST6 As Global.System.Data.DataColumn

        Private columnST7 As Global.System.Data.DataColumn

        Private columnST8 As Global.System.Data.DataColumn

        Private columnST9 As Global.System.Data.DataColumn

        Private columnST10 As Global.System.Data.DataColumn

        Private columnST11 As Global.System.Data.DataColumn

        Private columnST12 As Global.System.Data.DataColumn

        Private columnST13 As Global.System.Data.DataColumn

        Private columnT1 As Global.System.Data.DataColumn

        Private columnT2 As Global.System.Data.DataColumn

        Private columnT3 As Global.System.Data.DataColumn

        Private columnT4 As Global.System.Data.DataColumn

        Private columnT5 As Global.System.Data.DataColumn

        Private columnManag As Global.System.Data.DataColumn

        Private columnIdelDeathAssist As Global.System.Data.DataColumn

        Private columnClass1 As Global.System.Data.DataColumn

        Private columnClass2 As Global.System.Data.DataColumn

        Private columnClass3 As Global.System.Data.DataColumn

        Private columnClass4 As Global.System.Data.DataColumn

        Private columnClass5 As Global.System.Data.DataColumn

        Private columnOldClass1 As Global.System.Data.DataColumn

        Private columnOldClass2 As Global.System.Data.DataColumn

        Private columnOldClass3 As Global.System.Data.DataColumn

        Private columnOldClass4 As Global.System.Data.DataColumn

        Private columnOldClass5 As Global.System.Data.DataColumn

        Private columnOverWday As Global.System.Data.DataColumn

        Private columnOverWNight As Global.System.Data.DataColumn

        Private columnWorkOhr As Global.System.Data.DataColumn

        Private columnIsOldEfficts As Global.System.Data.DataColumn

        Private columnTopWoValue1 As Global.System.Data.DataColumn

        Private columnTopWoValue2 As Global.System.Data.DataColumn

        Private columnTopWoValue3 As Global.System.Data.DataColumn

        Private columnTopWoValue4 As Global.System.Data.DataColumn

        Private columnTopWoValue5 As Global.System.Data.DataColumn

        Private columnQhelp1 As Global.System.Data.DataColumn

        Private columnQhelp2 As Global.System.Data.DataColumn

        Private columnAvgMutable As Global.System.Data.DataColumn

        Private columnAllowancePerc As Global.System.Data.DataColumn

        Private columnAllowanceDays As Global.System.Data.DataColumn

        Private columnDangerV As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub New()
            MyBase.New
            Me.TableName = "SalaryConstants"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property SalaryConstIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalaryConstID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property WifeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWife
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Child1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnChild1
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Child2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnChild2
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Child3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnChild3
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property OtherChildColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOtherChild
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property TSpecializeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTSpecialize
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property SpecializeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpecialize
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property TypeSpecializeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeSpecialize
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property SocialInsuranceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSocialInsurance
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property CooperateBoxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCooperateBox
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property CooperateBox1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCooperateBox1
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property CooperationWorkersColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCooperationWorkers
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property EngCooperationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEngCooperation
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property habitationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnhabitation
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property AssistBoxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssistBox
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property TypoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypo
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property DeathAssistColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeathAssist
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property EndServiceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEndService
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property EngFarmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEngFarm
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property stipendInsuranceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstipendInsurance
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property TaxImmunityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTaxImmunity
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property ControlIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnControlID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property CleanerCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCleanerCost
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property WorkerTaxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWorkerTax
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property ST1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnST1
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property ST2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnST2
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property ST3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnST3
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property ST4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnST4
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property ST5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnST5
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property ST6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnST6
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property ST7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnST7
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property ST8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnST8
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property ST9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnST9
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property ST10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnST10
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property ST11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnST11
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property ST12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnST12
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property ST13Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnST13
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property T1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnT1
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property T2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnT2
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property T3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnT3
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property T4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnT4
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property T5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnT5
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property ManagColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnManag
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property IdelDeathAssistColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdelDeathAssist
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Class1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnClass1
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Class2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnClass2
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Class3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnClass3
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Class4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnClass4
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Class5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnClass5
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property OldClass1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOldClass1
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property OldClass2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOldClass2
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property OldClass3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOldClass3
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property OldClass4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOldClass4
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property OldClass5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOldClass5
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property OverWdayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOverWday
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property OverWNightColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOverWNight
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property WorkOhrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWorkOhr
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property IsOldEffictsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsOldEfficts
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property TopWoValue1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTopWoValue1
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property TopWoValue2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTopWoValue2
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property TopWoValue3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTopWoValue3
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property TopWoValue4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTopWoValue4
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property TopWoValue5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTopWoValue5
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Qhelp1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnQhelp1
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Qhelp2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnQhelp2
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property AvgMutableColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAvgMutable
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property AllowancePercColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAllowancePerc
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property AllowanceDaysColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAllowanceDays
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property DangerVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDangerV
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Browsable(False)>
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Default Public ReadOnly Property Item(ByVal index As Integer) As SalaryConstantsRow
            Get
                Return CType(Me.Rows(index), SalaryConstantsRow)
            End Get
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event SalaryConstantsRowChanging As SalaryConstantsRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event SalaryConstantsRowChanged As SalaryConstantsRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event SalaryConstantsRowDeleting As SalaryConstantsRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event SalaryConstantsRowDeleted As SalaryConstantsRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overloads Sub AddSalaryConstantsRow(ByVal row As SalaryConstantsRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overloads Function AddSalaryConstantsRow(
                    ByVal SalaryConstID As Integer,
                    ByVal Wife As Double,
                    ByVal Child1 As Double,
                    ByVal Child2 As Double,
                    ByVal Child3 As Double,
                    ByVal OtherChild As Double,
                    ByVal TSpecialize As Double,
                    ByVal Specialize As Double,
                    ByVal TypeSpecialize As Double,
                    ByVal SocialInsurance As Double,
                    ByVal CooperateBox As Double,
                    ByVal CooperateBox1 As Double,
                    ByVal CooperationWorkers As Double,
                    ByVal EngCooperation As Double,
                    ByVal habitation As Double,
                    ByVal AssistBox As Double,
                    ByVal Typo As Double,
                    ByVal DeathAssist As Double,
                    ByVal EndService As Double,
                    ByVal EngFarm As Double,
                    ByVal stipendInsurance As Double,
                    ByVal TaxImmunity As Double,
                    ByVal ControlID As Integer,
                    ByVal CleanerCost As Integer,
                    ByVal WorkerTax As String,
                    ByVal ST1 As Double,
                    ByVal ST2 As Double,
                    ByVal ST3 As Double,
                    ByVal ST4 As Double,
                    ByVal ST5 As Double,
                    ByVal ST6 As Double,
                    ByVal ST7 As Double,
                    ByVal ST8 As Double,
                    ByVal ST9 As Double,
                    ByVal ST10 As Double,
                    ByVal ST11 As Double,
                    ByVal ST12 As Double,
                    ByVal ST13 As Double,
                    ByVal T1 As Double,
                    ByVal T2 As Double,
                    ByVal T3 As Double,
                    ByVal T4 As Double,
                    ByVal T5 As Double,
                    ByVal Manag As Integer,
                    ByVal IdelDeathAssist As Boolean,
                    ByVal Class1 As Integer,
                    ByVal Class2 As Integer,
                    ByVal Class3 As Integer,
                    ByVal Class4 As Integer,
                    ByVal Class5 As Integer,
                    ByVal OldClass1 As Integer,
                    ByVal OldClass2 As Integer,
                    ByVal OldClass3 As Integer,
                    ByVal OldClass4 As Integer,
                    ByVal OldClass5 As Integer,
                    ByVal OverWday As Decimal,
                    ByVal OverWNight As Decimal,
                    ByVal WorkOhr As Integer,
                    ByVal IsOldEfficts As Boolean,
                    ByVal TopWoValue1 As Integer,
                    ByVal TopWoValue2 As Integer,
                    ByVal TopWoValue3 As Integer,
                    ByVal TopWoValue4 As Integer,
                    ByVal TopWoValue5 As Integer,
                    ByVal Qhelp1 As Integer,
                    ByVal Qhelp2 As Integer,
                    ByVal AvgMutable As Integer,
                    ByVal AllowancePerc As Double,
                    ByVal AllowanceDays As Integer,
                    ByVal DangerV As Integer) As SalaryConstantsRow
            Dim rowSalaryConstantsRow As SalaryConstantsRow = CType(Me.NewRow, SalaryConstantsRow)
            Dim columnValuesArray() As Object = New Object() {SalaryConstID, Wife, Child1, Child2, Child3, OtherChild, TSpecialize, Specialize, TypeSpecialize, SocialInsurance, CooperateBox, CooperateBox1, CooperationWorkers, EngCooperation, habitation, AssistBox, Typo, DeathAssist, EndService, EngFarm, stipendInsurance, TaxImmunity, ControlID, CleanerCost, WorkerTax, ST1, ST2, ST3, ST4, ST5, ST6, ST7, ST8, ST9, ST10, ST11, ST12, ST13, T1, T2, T3, T4, T5, Manag, IdelDeathAssist, Class1, Class2, Class3, Class4, Class5, OldClass1, OldClass2, OldClass3, OldClass4, OldClass5, OverWday, OverWNight, WorkOhr, IsOldEfficts, TopWoValue1, TopWoValue2, TopWoValue3, TopWoValue4, TopWoValue5, Qhelp1, Qhelp2, AvgMutable, AllowancePerc, AllowanceDays, DangerV}
            rowSalaryConstantsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSalaryConstantsRow)
            Return rowSalaryConstantsRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function FindBySalaryConstID(ByVal SalaryConstID As Integer) As SalaryConstantsRow
            Return CType(Me.Rows.Find(New Object() {SalaryConstID}), SalaryConstantsRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SalaryConstantsDataTable = CType(MyBase.Clone, SalaryConstantsDataTable)
            cln.InitVars
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SalaryConstantsDataTable()
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub InitVars()
            Me.columnSalaryConstID = MyBase.Columns("SalaryConstID")
            Me.columnWife = MyBase.Columns("Wife")
            Me.columnChild1 = MyBase.Columns("Child1")
            Me.columnChild2 = MyBase.Columns("Child2")
            Me.columnChild3 = MyBase.Columns("Child3")
            Me.columnOtherChild = MyBase.Columns("OtherChild")
            Me.columnTSpecialize = MyBase.Columns("TSpecialize")
            Me.columnSpecialize = MyBase.Columns("Specialize")
            Me.columnTypeSpecialize = MyBase.Columns("TypeSpecialize")
            Me.columnSocialInsurance = MyBase.Columns("SocialInsurance")
            Me.columnCooperateBox = MyBase.Columns("CooperateBox")
            Me.columnCooperateBox1 = MyBase.Columns("CooperateBox1")
            Me.columnCooperationWorkers = MyBase.Columns("CooperationWorkers")
            Me.columnEngCooperation = MyBase.Columns("EngCooperation")
            Me.columnhabitation = MyBase.Columns("habitation")
            Me.columnAssistBox = MyBase.Columns("AssistBox")
            Me.columnTypo = MyBase.Columns("Typo")
            Me.columnDeathAssist = MyBase.Columns("DeathAssist")
            Me.columnEndService = MyBase.Columns("EndService")
            Me.columnEngFarm = MyBase.Columns("EngFarm")
            Me.columnstipendInsurance = MyBase.Columns("stipendInsurance")
            Me.columnTaxImmunity = MyBase.Columns("TaxImmunity")
            Me.columnControlID = MyBase.Columns("ControlID")
            Me.columnCleanerCost = MyBase.Columns("CleanerCost")
            Me.columnWorkerTax = MyBase.Columns("WorkerTax")
            Me.columnST1 = MyBase.Columns("ST1")
            Me.columnST2 = MyBase.Columns("ST2")
            Me.columnST3 = MyBase.Columns("ST3")
            Me.columnST4 = MyBase.Columns("ST4")
            Me.columnST5 = MyBase.Columns("ST5")
            Me.columnST6 = MyBase.Columns("ST6")
            Me.columnST7 = MyBase.Columns("ST7")
            Me.columnST8 = MyBase.Columns("ST8")
            Me.columnST9 = MyBase.Columns("ST9")
            Me.columnST10 = MyBase.Columns("ST10")
            Me.columnST11 = MyBase.Columns("ST11")
            Me.columnST12 = MyBase.Columns("ST12")
            Me.columnST13 = MyBase.Columns("ST13")
            Me.columnT1 = MyBase.Columns("T1")
            Me.columnT2 = MyBase.Columns("T2")
            Me.columnT3 = MyBase.Columns("T3")
            Me.columnT4 = MyBase.Columns("T4")
            Me.columnT5 = MyBase.Columns("T5")
            Me.columnManag = MyBase.Columns("Manag")
            Me.columnIdelDeathAssist = MyBase.Columns("IdelDeathAssist")
            Me.columnClass1 = MyBase.Columns("Class1")
            Me.columnClass2 = MyBase.Columns("Class2")
            Me.columnClass3 = MyBase.Columns("Class3")
            Me.columnClass4 = MyBase.Columns("Class4")
            Me.columnClass5 = MyBase.Columns("Class5")
            Me.columnOldClass1 = MyBase.Columns("OldClass1")
            Me.columnOldClass2 = MyBase.Columns("OldClass2")
            Me.columnOldClass3 = MyBase.Columns("OldClass3")
            Me.columnOldClass4 = MyBase.Columns("OldClass4")
            Me.columnOldClass5 = MyBase.Columns("OldClass5")
            Me.columnOverWday = MyBase.Columns("OverWday")
            Me.columnOverWNight = MyBase.Columns("OverWNight")
            Me.columnWorkOhr = MyBase.Columns("WorkOhr")
            Me.columnIsOldEfficts = MyBase.Columns("IsOldEfficts")
            Me.columnTopWoValue1 = MyBase.Columns("TopWoValue1")
            Me.columnTopWoValue2 = MyBase.Columns("TopWoValue2")
            Me.columnTopWoValue3 = MyBase.Columns("TopWoValue3")
            Me.columnTopWoValue4 = MyBase.Columns("TopWoValue4")
            Me.columnTopWoValue5 = MyBase.Columns("TopWoValue5")
            Me.columnQhelp1 = MyBase.Columns("Qhelp1")
            Me.columnQhelp2 = MyBase.Columns("Qhelp2")
            Me.columnAvgMutable = MyBase.Columns("AvgMutable")
            Me.columnAllowancePerc = MyBase.Columns("AllowancePerc")
            Me.columnAllowanceDays = MyBase.Columns("AllowanceDays")
            Me.columnDangerV = MyBase.Columns("DangerV")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Sub InitClass()
            Me.columnSalaryConstID = New Global.System.Data.DataColumn("SalaryConstID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalaryConstID)
            Me.columnWife = New Global.System.Data.DataColumn("Wife", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWife)
            Me.columnChild1 = New Global.System.Data.DataColumn("Child1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChild1)
            Me.columnChild2 = New Global.System.Data.DataColumn("Child2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChild2)
            Me.columnChild3 = New Global.System.Data.DataColumn("Child3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChild3)
            Me.columnOtherChild = New Global.System.Data.DataColumn("OtherChild", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOtherChild)
            Me.columnTSpecialize = New Global.System.Data.DataColumn("TSpecialize", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTSpecialize)
            Me.columnSpecialize = New Global.System.Data.DataColumn("Specialize", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpecialize)
            Me.columnTypeSpecialize = New Global.System.Data.DataColumn("TypeSpecialize", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeSpecialize)
            Me.columnSocialInsurance = New Global.System.Data.DataColumn("SocialInsurance", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSocialInsurance)
            Me.columnCooperateBox = New Global.System.Data.DataColumn("CooperateBox", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCooperateBox)
            Me.columnCooperateBox1 = New Global.System.Data.DataColumn("CooperateBox1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCooperateBox1)
            Me.columnCooperationWorkers = New Global.System.Data.DataColumn("CooperationWorkers", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCooperationWorkers)
            Me.columnEngCooperation = New Global.System.Data.DataColumn("EngCooperation", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEngCooperation)
            Me.columnhabitation = New Global.System.Data.DataColumn("habitation", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnhabitation)
            Me.columnAssistBox = New Global.System.Data.DataColumn("AssistBox", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssistBox)
            Me.columnTypo = New Global.System.Data.DataColumn("Typo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypo)
            Me.columnDeathAssist = New Global.System.Data.DataColumn("DeathAssist", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeathAssist)
            Me.columnEndService = New Global.System.Data.DataColumn("EndService", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEndService)
            Me.columnEngFarm = New Global.System.Data.DataColumn("EngFarm", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEngFarm)
            Me.columnstipendInsurance = New Global.System.Data.DataColumn("stipendInsurance", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstipendInsurance)
            Me.columnTaxImmunity = New Global.System.Data.DataColumn("TaxImmunity", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTaxImmunity)
            Me.columnControlID = New Global.System.Data.DataColumn("ControlID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnControlID)
            Me.columnCleanerCost = New Global.System.Data.DataColumn("CleanerCost", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCleanerCost)
            Me.columnWorkerTax = New Global.System.Data.DataColumn("WorkerTax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWorkerTax)
            Me.columnST1 = New Global.System.Data.DataColumn("ST1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnST1)
            Me.columnST2 = New Global.System.Data.DataColumn("ST2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnST2)
            Me.columnST3 = New Global.System.Data.DataColumn("ST3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnST3)
            Me.columnST4 = New Global.System.Data.DataColumn("ST4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnST4)
            Me.columnST5 = New Global.System.Data.DataColumn("ST5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnST5)
            Me.columnST6 = New Global.System.Data.DataColumn("ST6", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnST6)
            Me.columnST7 = New Global.System.Data.DataColumn("ST7", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnST7)
            Me.columnST8 = New Global.System.Data.DataColumn("ST8", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnST8)
            Me.columnST9 = New Global.System.Data.DataColumn("ST9", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnST9)
            Me.columnST10 = New Global.System.Data.DataColumn("ST10", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnST10)
            Me.columnST11 = New Global.System.Data.DataColumn("ST11", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnST11)
            Me.columnST12 = New Global.System.Data.DataColumn("ST12", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnST12)
            Me.columnST13 = New Global.System.Data.DataColumn("ST13", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnST13)
            Me.columnT1 = New Global.System.Data.DataColumn("T1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnT1)
            Me.columnT2 = New Global.System.Data.DataColumn("T2", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnT2)
            Me.columnT3 = New Global.System.Data.DataColumn("T3", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnT3)
            Me.columnT4 = New Global.System.Data.DataColumn("T4", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnT4)
            Me.columnT5 = New Global.System.Data.DataColumn("T5", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnT5)
            Me.columnManag = New Global.System.Data.DataColumn("Manag", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnManag)
            Me.columnIdelDeathAssist = New Global.System.Data.DataColumn("IdelDeathAssist", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdelDeathAssist)
            Me.columnClass1 = New Global.System.Data.DataColumn("Class1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClass1)
            Me.columnClass2 = New Global.System.Data.DataColumn("Class2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClass2)
            Me.columnClass3 = New Global.System.Data.DataColumn("Class3", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClass3)
            Me.columnClass4 = New Global.System.Data.DataColumn("Class4", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClass4)
            Me.columnClass5 = New Global.System.Data.DataColumn("Class5", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClass5)
            Me.columnOldClass1 = New Global.System.Data.DataColumn("OldClass1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOldClass1)
            Me.columnOldClass2 = New Global.System.Data.DataColumn("OldClass2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOldClass2)
            Me.columnOldClass3 = New Global.System.Data.DataColumn("OldClass3", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOldClass3)
            Me.columnOldClass4 = New Global.System.Data.DataColumn("OldClass4", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOldClass4)
            Me.columnOldClass5 = New Global.System.Data.DataColumn("OldClass5", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOldClass5)
            Me.columnOverWday = New Global.System.Data.DataColumn("OverWday", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOverWday)
            Me.columnOverWNight = New Global.System.Data.DataColumn("OverWNight", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOverWNight)
            Me.columnWorkOhr = New Global.System.Data.DataColumn("WorkOhr", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWorkOhr)
            Me.columnIsOldEfficts = New Global.System.Data.DataColumn("IsOldEfficts", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsOldEfficts)
            Me.columnTopWoValue1 = New Global.System.Data.DataColumn("TopWoValue1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTopWoValue1)
            Me.columnTopWoValue2 = New Global.System.Data.DataColumn("TopWoValue2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTopWoValue2)
            Me.columnTopWoValue3 = New Global.System.Data.DataColumn("TopWoValue3", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTopWoValue3)
            Me.columnTopWoValue4 = New Global.System.Data.DataColumn("TopWoValue4", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTopWoValue4)
            Me.columnTopWoValue5 = New Global.System.Data.DataColumn("TopWoValue5", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTopWoValue5)
            Me.columnQhelp1 = New Global.System.Data.DataColumn("Qhelp1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQhelp1)
            Me.columnQhelp2 = New Global.System.Data.DataColumn("Qhelp2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQhelp2)
            Me.columnAvgMutable = New Global.System.Data.DataColumn("AvgMutable", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAvgMutable)
            Me.columnAllowancePerc = New Global.System.Data.DataColumn("AllowancePerc", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAllowancePerc)
            Me.columnAllowanceDays = New Global.System.Data.DataColumn("AllowanceDays", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAllowanceDays)
            Me.columnDangerV = New Global.System.Data.DataColumn("DangerV", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDangerV)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSalaryConstID}, True))
            Me.columnSalaryConstID.AllowDBNull = False
            Me.columnSalaryConstID.Unique = True
            Me.columnWorkerTax.MaxLength = 5
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function NewSalaryConstantsRow() As SalaryConstantsRow
            Return CType(Me.NewRow, SalaryConstantsRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SalaryConstantsRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SalaryConstantsRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SalaryConstantsRowChangedEvent) Is Nothing) Then
                RaiseEvent SalaryConstantsRowChanged(Me, New SalaryConstantsRowChangeEvent(CType(e.Row, SalaryConstantsRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SalaryConstantsRowChangingEvent) Is Nothing) Then
                RaiseEvent SalaryConstantsRowChanging(Me, New SalaryConstantsRowChangeEvent(CType(e.Row, SalaryConstantsRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SalaryConstantsRowDeletedEvent) Is Nothing) Then
                RaiseEvent SalaryConstantsRowDeleted(Me, New SalaryConstantsRowChangeEvent(CType(e.Row, SalaryConstantsRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SalaryConstantsRowDeletingEvent) Is Nothing) Then
                RaiseEvent SalaryConstantsRowDeleting(Me, New SalaryConstantsRowChangeEvent(CType(e.Row, SalaryConstantsRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub RemoveSalaryConstantsRow(ByVal row As SalaryConstantsRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As SetupSalaryDataSet = New SetupSalaryDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SalaryConstantsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SetupTaxRow
        Inherits Global.System.Data.DataRow

        Private tableSetupTax As SetupTaxDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSetupTax = CType(Me.Table, SetupTaxDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property TaxationID() As Integer
            Get
                Return CType(Me(Me.tableSetupTax.TaxationIDColumn), Integer)
            End Get
            Set
                Me(Me.tableSetupTax.TaxationIDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property TaxImmunity() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSetupTax.TaxImmunityColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TaxImmunity' in table 'SetupTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSetupTax.TaxImmunityColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Tax1() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSetupTax.Tax1Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tax1' in table 'SetupTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSetupTax.Tax1Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Tax2() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSetupTax.Tax2Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tax2' in table 'SetupTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSetupTax.Tax2Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Tax3() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSetupTax.Tax3Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tax3' in table 'SetupTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSetupTax.Tax3Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Tax4() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSetupTax.Tax4Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tax4' in table 'SetupTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSetupTax.Tax4Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Tax5() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSetupTax.Tax5Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tax5' in table 'SetupTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSetupTax.Tax5Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Tax6() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSetupTax.Tax6Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tax6' in table 'SetupTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSetupTax.Tax6Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Tax7() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSetupTax.Tax7Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tax7' in table 'SetupTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSetupTax.Tax7Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Tax8() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSetupTax.Tax8Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tax8' in table 'SetupTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSetupTax.Tax8Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Ptax1() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSetupTax.Ptax1Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ptax1' in table 'SetupTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSetupTax.Ptax1Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Ptax2() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSetupTax.Ptax2Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ptax2' in table 'SetupTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSetupTax.Ptax2Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Ptax3() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSetupTax.Ptax3Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ptax3' in table 'SetupTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSetupTax.Ptax3Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Ptax4() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSetupTax.Ptax4Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ptax4' in table 'SetupTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSetupTax.Ptax4Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Ptax5() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSetupTax.Ptax5Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ptax5' in table 'SetupTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSetupTax.Ptax5Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Ptax6() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSetupTax.Ptax6Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ptax6' in table 'SetupTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSetupTax.Ptax6Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Ptax7() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSetupTax.Ptax7Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ptax7' in table 'SetupTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSetupTax.Ptax7Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Ptax8() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSetupTax.Ptax8Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ptax8' in table 'SetupTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSetupTax.Ptax8Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property UserID() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSetupTax.UserIDColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UserID' in table 'SetupTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSetupTax.UserIDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property LastModify() As String
            Get
                Try
                    Return CType(Me(Me.tableSetupTax.LastModifyColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastModify' in table 'SetupTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSetupTax.LastModifyColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property CreateDate() As String
            Get
                Try
                    Return CType(Me(Me.tableSetupTax.CreateDateColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreateDate' in table 'SetupTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSetupTax.CreateDateColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property ControlID() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSetupTax.ControlIDColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ControlID' in table 'SetupTax' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSetupTax.ControlIDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsTaxImmunityNull() As Boolean
            Return Me.IsNull(Me.tableSetupTax.TaxImmunityColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetTaxImmunityNull()
            Me(Me.tableSetupTax.TaxImmunityColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsTax1Null() As Boolean
            Return Me.IsNull(Me.tableSetupTax.Tax1Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetTax1Null()
            Me(Me.tableSetupTax.Tax1Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsTax2Null() As Boolean
            Return Me.IsNull(Me.tableSetupTax.Tax2Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetTax2Null()
            Me(Me.tableSetupTax.Tax2Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsTax3Null() As Boolean
            Return Me.IsNull(Me.tableSetupTax.Tax3Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetTax3Null()
            Me(Me.tableSetupTax.Tax3Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsTax4Null() As Boolean
            Return Me.IsNull(Me.tableSetupTax.Tax4Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetTax4Null()
            Me(Me.tableSetupTax.Tax4Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsTax5Null() As Boolean
            Return Me.IsNull(Me.tableSetupTax.Tax5Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetTax5Null()
            Me(Me.tableSetupTax.Tax5Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsTax6Null() As Boolean
            Return Me.IsNull(Me.tableSetupTax.Tax6Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetTax6Null()
            Me(Me.tableSetupTax.Tax6Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsTax7Null() As Boolean
            Return Me.IsNull(Me.tableSetupTax.Tax7Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetTax7Null()
            Me(Me.tableSetupTax.Tax7Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsTax8Null() As Boolean
            Return Me.IsNull(Me.tableSetupTax.Tax8Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetTax8Null()
            Me(Me.tableSetupTax.Tax8Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsPtax1Null() As Boolean
            Return Me.IsNull(Me.tableSetupTax.Ptax1Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetPtax1Null()
            Me(Me.tableSetupTax.Ptax1Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsPtax2Null() As Boolean
            Return Me.IsNull(Me.tableSetupTax.Ptax2Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetPtax2Null()
            Me(Me.tableSetupTax.Ptax2Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsPtax3Null() As Boolean
            Return Me.IsNull(Me.tableSetupTax.Ptax3Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetPtax3Null()
            Me(Me.tableSetupTax.Ptax3Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsPtax4Null() As Boolean
            Return Me.IsNull(Me.tableSetupTax.Ptax4Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetPtax4Null()
            Me(Me.tableSetupTax.Ptax4Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsPtax5Null() As Boolean
            Return Me.IsNull(Me.tableSetupTax.Ptax5Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetPtax5Null()
            Me(Me.tableSetupTax.Ptax5Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsPtax6Null() As Boolean
            Return Me.IsNull(Me.tableSetupTax.Ptax6Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetPtax6Null()
            Me(Me.tableSetupTax.Ptax6Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsPtax7Null() As Boolean
            Return Me.IsNull(Me.tableSetupTax.Ptax7Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetPtax7Null()
            Me(Me.tableSetupTax.Ptax7Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsPtax8Null() As Boolean
            Return Me.IsNull(Me.tableSetupTax.Ptax8Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetPtax8Null()
            Me(Me.tableSetupTax.Ptax8Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsUserIDNull() As Boolean
            Return Me.IsNull(Me.tableSetupTax.UserIDColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetUserIDNull()
            Me(Me.tableSetupTax.UserIDColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsLastModifyNull() As Boolean
            Return Me.IsNull(Me.tableSetupTax.LastModifyColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetLastModifyNull()
            Me(Me.tableSetupTax.LastModifyColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tableSetupTax.CreateDateColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetCreateDateNull()
            Me(Me.tableSetupTax.CreateDateColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsControlIDNull() As Boolean
            Return Me.IsNull(Me.tableSetupTax.ControlIDColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetControlIDNull()
            Me(Me.tableSetupTax.ControlIDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TypeSpecializeValuesRow
        Inherits Global.System.Data.DataRow

        Private tableTypeSpecializeValues As TypeSpecializeValuesDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTypeSpecializeValues = CType(Me.Table, TypeSpecializeValuesDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property TypeSpecializeID() As Integer
            Get
                Return CType(Me(Me.tableTypeSpecializeValues.TypeSpecializeIDColumn), Integer)
            End Get
            Set
                Me(Me.tableTypeSpecializeValues.TypeSpecializeIDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property TypeSpecializeName() As String
            Get
                Try
                    Return CType(Me(Me.tableTypeSpecializeValues.TypeSpecializeNameColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypeSpecializeName' in table 'TypeSpecializeValues' is DBNu" &
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableTypeSpecializeValues.TypeSpecializeNameColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property TypeSpecializeValue() As Double
            Get
                Try
                    Return CType(Me(Me.tableTypeSpecializeValues.TypeSpecializeValueColumn), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypeSpecializeValue' in table 'TypeSpecializeValues' is DBN" &
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTypeSpecializeValues.TypeSpecializeValueColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsTypeSpecializeNameNull() As Boolean
            Return Me.IsNull(Me.tableTypeSpecializeValues.TypeSpecializeNameColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetTypeSpecializeNameNull()
            Me(Me.tableTypeSpecializeValues.TypeSpecializeNameColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsTypeSpecializeValueNull() As Boolean
            Return Me.IsNull(Me.tableTypeSpecializeValues.TypeSpecializeValueColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetTypeSpecializeValueNull()
            Me(Me.tableTypeSpecializeValues.TypeSpecializeValueColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class MutableSettingRow
        Inherits Global.System.Data.DataRow

        Private tableMutableSetting As MutableSettingDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMutableSetting = CType(Me.Table, MutableSettingDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property MutableID() As Integer
            Get
                Return CType(Me(Me.tableMutableSetting.MutableIDColumn), Integer)
            End Get
            Set
                Me(Me.tableMutableSetting.MutableIDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property MutableClass() As Integer
            Get
                Return CType(Me(Me.tableMutableSetting.MutableClassColumn), Integer)
            End Get
            Set
                Me(Me.tableMutableSetting.MutableClassColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property MutableCost() As String
            Get
                Return CType(Me(Me.tableMutableSetting.MutableCostColumn), String)
            End Get
            Set
                Me(Me.tableMutableSetting.MutableCostColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property MutableLimited() As Integer
            Get
                Return CType(Me(Me.tableMutableSetting.MutableLimitedColumn), Integer)
            End Get
            Set
                Me(Me.tableMutableSetting.MutableLimitedColumn) = value
            End Set
        End Property
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SpecializeValuesRow
        Inherits Global.System.Data.DataRow

        Private tableSpecializeValues As SpecializeValuesDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSpecializeValues = CType(Me.Table, SpecializeValuesDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property SpecializeID() As Integer
            Get
                Return CType(Me(Me.tableSpecializeValues.SpecializeIDColumn), Integer)
            End Get
            Set
                Me(Me.tableSpecializeValues.SpecializeIDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property SpecializeName() As String
            Get
                Try
                    Return CType(Me(Me.tableSpecializeValues.SpecializeNameColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SpecializeName' in table 'SpecializeValues' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpecializeValues.SpecializeNameColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property SpecializeValue() As Double
            Get
                Try
                    Return CType(Me(Me.tableSpecializeValues.SpecializeValueColumn), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SpecializeValue' in table 'SpecializeValues' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSpecializeValues.SpecializeValueColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsSpecializeNameNull() As Boolean
            Return Me.IsNull(Me.tableSpecializeValues.SpecializeNameColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetSpecializeNameNull()
            Me(Me.tableSpecializeValues.SpecializeNameColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsSpecializeValueNull() As Boolean
            Return Me.IsNull(Me.tableSpecializeValues.SpecializeValueColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetSpecializeValueNull()
            Me(Me.tableSpecializeValues.SpecializeValueColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class RestorePointsRow
        Inherits Global.System.Data.DataRow

        Private tableRestorePoints As RestorePointsDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRestorePoints = CType(Me.Table, RestorePointsDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property H_Date() As String
            Get
                Try
                    Return CType(Me(Me.tableRestorePoints.H_DateColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'H_Date' in table 'RestorePoints' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRestorePoints.H_DateColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property CID() As Integer
            Get
                Try
                    Return CType(Me(Me.tableRestorePoints.CIDColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CID' in table 'RestorePoints' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRestorePoints.CIDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsH_DateNull() As Boolean
            Return Me.IsNull(Me.tableRestorePoints.H_DateColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetH_DateNull()
            Me(Me.tableRestorePoints.H_DateColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsCIDNull() As Boolean
            Return Me.IsNull(Me.tableRestorePoints.CIDColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetCIDNull()
            Me(Me.tableRestorePoints.CIDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SalaryConstantsRow
        Inherits Global.System.Data.DataRow

        Private tableSalaryConstants As SalaryConstantsDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSalaryConstants = CType(Me.Table, SalaryConstantsDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property SalaryConstID() As Integer
            Get
                Return CType(Me(Me.tableSalaryConstants.SalaryConstIDColumn), Integer)
            End Get
            Set
                Me(Me.tableSalaryConstants.SalaryConstIDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Wife() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.WifeColumn), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Wife' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.WifeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Child1() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.Child1Column), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Child1' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.Child1Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Child2() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.Child2Column), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Child2' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.Child2Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Child3() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.Child3Column), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Child3' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.Child3Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property OtherChild() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.OtherChildColumn), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OtherChild' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.OtherChildColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property TSpecialize() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.TSpecializeColumn), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TSpecialize' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.TSpecializeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Specialize() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.SpecializeColumn), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Specialize' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.SpecializeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property TypeSpecialize() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.TypeSpecializeColumn), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypeSpecialize' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.TypeSpecializeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property SocialInsurance() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.SocialInsuranceColumn), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SocialInsurance' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.SocialInsuranceColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property CooperateBox() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.CooperateBoxColumn), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CooperateBox' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.CooperateBoxColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property CooperateBox1() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.CooperateBox1Column), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CooperateBox1' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.CooperateBox1Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property CooperationWorkers() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.CooperationWorkersColumn), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CooperationWorkers' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.CooperationWorkersColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property EngCooperation() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.EngCooperationColumn), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EngCooperation' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.EngCooperationColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property habitation() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.habitationColumn), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'habitation' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.habitationColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property AssistBox() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.AssistBoxColumn), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AssistBox' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.AssistBoxColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Typo() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.TypoColumn), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Typo' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.TypoColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property DeathAssist() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.DeathAssistColumn), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeathAssist' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.DeathAssistColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property EndService() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.EndServiceColumn), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EndService' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.EndServiceColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property EngFarm() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.EngFarmColumn), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EngFarm' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.EngFarmColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property stipendInsurance() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.stipendInsuranceColumn), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'stipendInsurance' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.stipendInsuranceColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property TaxImmunity() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.TaxImmunityColumn), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TaxImmunity' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.TaxImmunityColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property ControlID() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.ControlIDColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ControlID' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.ControlIDColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property CleanerCost() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.CleanerCostColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CleanerCost' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.CleanerCostColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property WorkerTax() As String
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.WorkerTaxColumn), String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WorkerTax' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.WorkerTaxColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property ST1() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.ST1Column), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ST1' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.ST1Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property ST2() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.ST2Column), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ST2' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.ST2Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property ST3() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.ST3Column), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ST3' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.ST3Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property ST4() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.ST4Column), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ST4' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.ST4Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property ST5() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.ST5Column), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ST5' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.ST5Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property ST6() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.ST6Column), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ST6' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.ST6Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property ST7() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.ST7Column), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ST7' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.ST7Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property ST8() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.ST8Column), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ST8' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.ST8Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property ST9() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.ST9Column), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ST9' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.ST9Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property ST10() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.ST10Column), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ST10' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.ST10Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property ST11() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.ST11Column), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ST11' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.ST11Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property ST12() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.ST12Column), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ST12' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.ST12Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property ST13() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.ST13Column), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ST13' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.ST13Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property T1() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.T1Column), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'T1' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.T1Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property T2() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.T2Column), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'T2' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.T2Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property T3() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.T3Column), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'T3' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.T3Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property T4() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.T4Column), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'T4' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.T4Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property T5() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.T5Column), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'T5' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.T5Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Manag() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.ManagColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Manag' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.ManagColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property IdelDeathAssist() As Boolean
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.IdelDeathAssistColumn), Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IdelDeathAssist' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.IdelDeathAssistColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Class1() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.Class1Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Class1' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.Class1Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Class2() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.Class2Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Class2' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.Class2Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Class3() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.Class3Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Class3' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.Class3Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Class4() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.Class4Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Class4' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.Class4Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Class5() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.Class5Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Class5' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.Class5Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property OldClass1() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.OldClass1Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OldClass1' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.OldClass1Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property OldClass2() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.OldClass2Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OldClass2' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.OldClass2Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property OldClass3() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.OldClass3Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OldClass3' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.OldClass3Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property OldClass4() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.OldClass4Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OldClass4' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.OldClass4Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property OldClass5() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.OldClass5Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OldClass5' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.OldClass5Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property OverWday() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.OverWdayColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OverWday' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.OverWdayColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property OverWNight() As Decimal
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.OverWNightColumn), Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OverWNight' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.OverWNightColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property WorkOhr() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.WorkOhrColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WorkOhr' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.WorkOhrColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property IsOldEfficts() As Boolean
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.IsOldEffictsColumn), Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsOldEfficts' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.IsOldEffictsColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property TopWoValue1() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.TopWoValue1Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TopWoValue1' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.TopWoValue1Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property TopWoValue2() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.TopWoValue2Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TopWoValue2' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.TopWoValue2Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property TopWoValue3() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.TopWoValue3Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TopWoValue3' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.TopWoValue3Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property TopWoValue4() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.TopWoValue4Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TopWoValue4' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.TopWoValue4Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property TopWoValue5() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.TopWoValue5Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TopWoValue5' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.TopWoValue5Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Qhelp1() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.Qhelp1Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qhelp1' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.Qhelp1Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Qhelp2() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.Qhelp2Column), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Qhelp2' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.Qhelp2Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property AvgMutable() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.AvgMutableColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AvgMutable' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.AvgMutableColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property AllowancePerc() As Double
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.AllowancePercColumn), Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AllowancePerc' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.AllowancePercColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property AllowanceDays() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.AllowanceDaysColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AllowanceDays' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.AllowanceDaysColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property DangerV() As Integer
            Get
                Try
                    Return CType(Me(Me.tableSalaryConstants.DangerVColumn), Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DangerV' in table 'SalaryConstants' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSalaryConstants.DangerVColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsWifeNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.WifeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetWifeNull()
            Me(Me.tableSalaryConstants.WifeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsChild1Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.Child1Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetChild1Null()
            Me(Me.tableSalaryConstants.Child1Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsChild2Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.Child2Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetChild2Null()
            Me(Me.tableSalaryConstants.Child2Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsChild3Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.Child3Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetChild3Null()
            Me(Me.tableSalaryConstants.Child3Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsOtherChildNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.OtherChildColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetOtherChildNull()
            Me(Me.tableSalaryConstants.OtherChildColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsTSpecializeNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.TSpecializeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetTSpecializeNull()
            Me(Me.tableSalaryConstants.TSpecializeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsSpecializeNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.SpecializeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetSpecializeNull()
            Me(Me.tableSalaryConstants.SpecializeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsTypeSpecializeNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.TypeSpecializeColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetTypeSpecializeNull()
            Me(Me.tableSalaryConstants.TypeSpecializeColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsSocialInsuranceNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.SocialInsuranceColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetSocialInsuranceNull()
            Me(Me.tableSalaryConstants.SocialInsuranceColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsCooperateBoxNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.CooperateBoxColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetCooperateBoxNull()
            Me(Me.tableSalaryConstants.CooperateBoxColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsCooperateBox1Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.CooperateBox1Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetCooperateBox1Null()
            Me(Me.tableSalaryConstants.CooperateBox1Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsCooperationWorkersNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.CooperationWorkersColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetCooperationWorkersNull()
            Me(Me.tableSalaryConstants.CooperationWorkersColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsEngCooperationNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.EngCooperationColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetEngCooperationNull()
            Me(Me.tableSalaryConstants.EngCooperationColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IshabitationNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.habitationColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SethabitationNull()
            Me(Me.tableSalaryConstants.habitationColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsAssistBoxNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.AssistBoxColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetAssistBoxNull()
            Me(Me.tableSalaryConstants.AssistBoxColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsTypoNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.TypoColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetTypoNull()
            Me(Me.tableSalaryConstants.TypoColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsDeathAssistNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.DeathAssistColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetDeathAssistNull()
            Me(Me.tableSalaryConstants.DeathAssistColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsEndServiceNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.EndServiceColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetEndServiceNull()
            Me(Me.tableSalaryConstants.EndServiceColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsEngFarmNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.EngFarmColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetEngFarmNull()
            Me(Me.tableSalaryConstants.EngFarmColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsstipendInsuranceNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.stipendInsuranceColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetstipendInsuranceNull()
            Me(Me.tableSalaryConstants.stipendInsuranceColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsTaxImmunityNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.TaxImmunityColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetTaxImmunityNull()
            Me(Me.tableSalaryConstants.TaxImmunityColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsControlIDNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.ControlIDColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetControlIDNull()
            Me(Me.tableSalaryConstants.ControlIDColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsCleanerCostNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.CleanerCostColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetCleanerCostNull()
            Me(Me.tableSalaryConstants.CleanerCostColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsWorkerTaxNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.WorkerTaxColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetWorkerTaxNull()
            Me(Me.tableSalaryConstants.WorkerTaxColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsST1Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.ST1Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetST1Null()
            Me(Me.tableSalaryConstants.ST1Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsST2Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.ST2Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetST2Null()
            Me(Me.tableSalaryConstants.ST2Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsST3Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.ST3Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetST3Null()
            Me(Me.tableSalaryConstants.ST3Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsST4Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.ST4Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetST4Null()
            Me(Me.tableSalaryConstants.ST4Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsST5Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.ST5Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetST5Null()
            Me(Me.tableSalaryConstants.ST5Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsST6Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.ST6Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetST6Null()
            Me(Me.tableSalaryConstants.ST6Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsST7Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.ST7Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetST7Null()
            Me(Me.tableSalaryConstants.ST7Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsST8Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.ST8Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetST8Null()
            Me(Me.tableSalaryConstants.ST8Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsST9Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.ST9Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetST9Null()
            Me(Me.tableSalaryConstants.ST9Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsST10Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.ST10Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetST10Null()
            Me(Me.tableSalaryConstants.ST10Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsST11Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.ST11Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetST11Null()
            Me(Me.tableSalaryConstants.ST11Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsST12Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.ST12Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetST12Null()
            Me(Me.tableSalaryConstants.ST12Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsST13Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.ST13Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetST13Null()
            Me(Me.tableSalaryConstants.ST13Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsT1Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.T1Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetT1Null()
            Me(Me.tableSalaryConstants.T1Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsT2Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.T2Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetT2Null()
            Me(Me.tableSalaryConstants.T2Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsT3Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.T3Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetT3Null()
            Me(Me.tableSalaryConstants.T3Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsT4Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.T4Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetT4Null()
            Me(Me.tableSalaryConstants.T4Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsT5Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.T5Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetT5Null()
            Me(Me.tableSalaryConstants.T5Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsManagNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.ManagColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetManagNull()
            Me(Me.tableSalaryConstants.ManagColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsIdelDeathAssistNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.IdelDeathAssistColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetIdelDeathAssistNull()
            Me(Me.tableSalaryConstants.IdelDeathAssistColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsClass1Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.Class1Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetClass1Null()
            Me(Me.tableSalaryConstants.Class1Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsClass2Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.Class2Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetClass2Null()
            Me(Me.tableSalaryConstants.Class2Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsClass3Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.Class3Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetClass3Null()
            Me(Me.tableSalaryConstants.Class3Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsClass4Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.Class4Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetClass4Null()
            Me(Me.tableSalaryConstants.Class4Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsClass5Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.Class5Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetClass5Null()
            Me(Me.tableSalaryConstants.Class5Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsOldClass1Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.OldClass1Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetOldClass1Null()
            Me(Me.tableSalaryConstants.OldClass1Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsOldClass2Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.OldClass2Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetOldClass2Null()
            Me(Me.tableSalaryConstants.OldClass2Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsOldClass3Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.OldClass3Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetOldClass3Null()
            Me(Me.tableSalaryConstants.OldClass3Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsOldClass4Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.OldClass4Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetOldClass4Null()
            Me(Me.tableSalaryConstants.OldClass4Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsOldClass5Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.OldClass5Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetOldClass5Null()
            Me(Me.tableSalaryConstants.OldClass5Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsOverWdayNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.OverWdayColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetOverWdayNull()
            Me(Me.tableSalaryConstants.OverWdayColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsOverWNightNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.OverWNightColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetOverWNightNull()
            Me(Me.tableSalaryConstants.OverWNightColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsWorkOhrNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.WorkOhrColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetWorkOhrNull()
            Me(Me.tableSalaryConstants.WorkOhrColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsIsOldEffictsNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.IsOldEffictsColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetIsOldEffictsNull()
            Me(Me.tableSalaryConstants.IsOldEffictsColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsTopWoValue1Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.TopWoValue1Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetTopWoValue1Null()
            Me(Me.tableSalaryConstants.TopWoValue1Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsTopWoValue2Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.TopWoValue2Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetTopWoValue2Null()
            Me(Me.tableSalaryConstants.TopWoValue2Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsTopWoValue3Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.TopWoValue3Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetTopWoValue3Null()
            Me(Me.tableSalaryConstants.TopWoValue3Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsTopWoValue4Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.TopWoValue4Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetTopWoValue4Null()
            Me(Me.tableSalaryConstants.TopWoValue4Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsTopWoValue5Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.TopWoValue5Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetTopWoValue5Null()
            Me(Me.tableSalaryConstants.TopWoValue5Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsQhelp1Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.Qhelp1Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetQhelp1Null()
            Me(Me.tableSalaryConstants.Qhelp1Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsQhelp2Null() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.Qhelp2Column)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetQhelp2Null()
            Me(Me.tableSalaryConstants.Qhelp2Column) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsAvgMutableNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.AvgMutableColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetAvgMutableNull()
            Me(Me.tableSalaryConstants.AvgMutableColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsAllowancePercNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.AllowancePercColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetAllowancePercNull()
            Me(Me.tableSalaryConstants.AllowancePercColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsAllowanceDaysNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.AllowanceDaysColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetAllowanceDaysNull()
            Me(Me.tableSalaryConstants.AllowanceDaysColumn) = Global.System.Convert.DBNull
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function IsDangerVNull() As Boolean
            Return Me.IsNull(Me.tableSalaryConstants.DangerVColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub SetDangerVNull()
            Me(Me.tableSalaryConstants.DangerVColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Class SetupTaxRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As SetupTaxRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub New(ByVal row As SetupTaxRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Row() As SetupTaxRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Class TypeSpecializeValuesRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As TypeSpecializeValuesRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub New(ByVal row As TypeSpecializeValuesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Row() As TypeSpecializeValuesRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Class MutableSettingRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As MutableSettingRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub New(ByVal row As MutableSettingRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Row() As MutableSettingRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Class SpecializeValuesRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As SpecializeValuesRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub New(ByVal row As SpecializeValuesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Row() As SpecializeValuesRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Class RestorePointsRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As RestorePointsRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub New(ByVal row As RestorePointsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Row() As RestorePointsRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Class SalaryConstantsRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As SalaryConstantsRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub New(ByVal row As SalaryConstantsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Row() As SalaryConstantsRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace SetupSalaryDataSetTableAdapters

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),
     Global.System.ComponentModel.ToolboxItem(True),
     Global.System.ComponentModel.DataObjectAttribute(True),
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" &
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
    Partial Public Class SetupTaxTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _transaction As Global.System.Data.SqlClient.SqlTransaction

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SetupTax"
            tableMapping.ColumnMappings.Add("TaxationID", "TaxationID")
            tableMapping.ColumnMappings.Add("TaxImmunity", "TaxImmunity")
            tableMapping.ColumnMappings.Add("Tax1", "Tax1")
            tableMapping.ColumnMappings.Add("Tax2", "Tax2")
            tableMapping.ColumnMappings.Add("Tax3", "Tax3")
            tableMapping.ColumnMappings.Add("Tax4", "Tax4")
            tableMapping.ColumnMappings.Add("Tax5", "Tax5")
            tableMapping.ColumnMappings.Add("Tax6", "Tax6")
            tableMapping.ColumnMappings.Add("Tax7", "Tax7")
            tableMapping.ColumnMappings.Add("Tax8", "Tax8")
            tableMapping.ColumnMappings.Add("Ptax1", "Ptax1")
            tableMapping.ColumnMappings.Add("Ptax2", "Ptax2")
            tableMapping.ColumnMappings.Add("Ptax3", "Ptax3")
            tableMapping.ColumnMappings.Add("Ptax4", "Ptax4")
            tableMapping.ColumnMappings.Add("Ptax5", "Ptax5")
            tableMapping.ColumnMappings.Add("Ptax6", "Ptax6")
            tableMapping.ColumnMappings.Add("Ptax7", "Ptax7")
            tableMapping.ColumnMappings.Add("Ptax8", "Ptax8")
            tableMapping.ColumnMappings.Add("UserID", "UserID")
            tableMapping.ColumnMappings.Add("LastModify", "LastModify")
            tableMapping.ColumnMappings.Add("CreateDate", "CreateDate")
            tableMapping.ColumnMappings.Add("ControlID", "ControlID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SetupTax] WHERE (([TaxationID] = @Original_TaxationID) AND ((@IsNull" &
                "_TaxImmunity = 1 AND [TaxImmunity] IS NULL) OR ([TaxImmunity] = @Original_TaxImm" &
                "unity)) AND ((@IsNull_Tax1 = 1 AND [Tax1] IS NULL) OR ([Tax1] = @Original_Tax1))" &
                " AND ((@IsNull_Tax2 = 1 AND [Tax2] IS NULL) OR ([Tax2] = @Original_Tax2)) AND ((" &
                "@IsNull_Tax3 = 1 AND [Tax3] IS NULL) OR ([Tax3] = @Original_Tax3)) AND ((@IsNull" &
                "_Tax4 = 1 AND [Tax4] IS NULL) OR ([Tax4] = @Original_Tax4)) AND ((@IsNull_Tax5 =" &
                " 1 AND [Tax5] IS NULL) OR ([Tax5] = @Original_Tax5)) AND ((@IsNull_Tax6 = 1 AND " &
                "[Tax6] IS NULL) OR ([Tax6] = @Original_Tax6)) AND ((@IsNull_Tax7 = 1 AND [Tax7] " &
                "IS NULL) OR ([Tax7] = @Original_Tax7)) AND ((@IsNull_Tax8 = 1 AND [Tax8] IS NULL" &
                ") OR ([Tax8] = @Original_Tax8)) AND ((@IsNull_Ptax1 = 1 AND [Ptax1] IS NULL) OR " &
                "([Ptax1] = @Original_Ptax1)) AND ((@IsNull_Ptax2 = 1 AND [Ptax2] IS NULL) OR ([P" &
                "tax2] = @Original_Ptax2)) AND ((@IsNull_Ptax3 = 1 AND [Ptax3] IS NULL) OR ([Ptax" &
                "3] = @Original_Ptax3)) AND ((@IsNull_Ptax4 = 1 AND [Ptax4] IS NULL) OR ([Ptax4] " &
                "= @Original_Ptax4)) AND ((@IsNull_Ptax5 = 1 AND [Ptax5] IS NULL) OR ([Ptax5] = @" &
                "Original_Ptax5)) AND ((@IsNull_Ptax6 = 1 AND [Ptax6] IS NULL) OR ([Ptax6] = @Ori" &
                "ginal_Ptax6)) AND ((@IsNull_Ptax7 = 1 AND [Ptax7] IS NULL) OR ([Ptax7] = @Origin" &
                "al_Ptax7)) AND ((@IsNull_Ptax8 = 1 AND [Ptax8] IS NULL) OR ([Ptax8] = @Original_" &
                "Ptax8)) AND ((@IsNull_UserID = 1 AND [UserID] IS NULL) OR ([UserID] = @Original_" &
                "UserID)) AND ((@IsNull_LastModify = 1 AND [LastModify] IS NULL) OR ([LastModify]" &
                " = @Original_LastModify)) AND ((@IsNull_CreateDate = 1 AND [CreateDate] IS NULL)" &
                " OR ([CreateDate] = @Original_CreateDate)) AND ((@IsNull_ControlID = 1 AND [Cont" &
                "rolID] IS NULL) OR ([ControlID] = @Original_ControlID)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TaxationID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TaxationID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TaxImmunity", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TaxImmunity", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TaxImmunity", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TaxImmunity", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tax1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tax1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tax2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tax2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tax3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax3", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tax3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax3", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tax4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax4", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tax4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax4", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tax5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax5", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tax5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax5", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tax6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax6", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tax6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax6", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tax7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax7", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tax7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax7", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tax8", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax8", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tax8", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax8", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ptax1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ptax1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ptax2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ptax2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ptax3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax3", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ptax3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax3", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ptax4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax4", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ptax4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax4", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ptax5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax5", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ptax5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax5", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ptax6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax6", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ptax6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax6", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ptax7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax7", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ptax7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax7", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ptax8", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax8", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ptax8", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax8", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserID", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LastModify", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastModify", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LastModify", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastModify", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CreateDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreateDate", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CreateDate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreateDate", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ControlID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ControlID", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ControlID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ControlID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [SetupTax] ([TaxationID], [TaxImmunity], [Tax1], [Tax2], [Tax3], [Tax" &
                "4], [Tax5], [Tax6], [Tax7], [Tax8], [Ptax1], [Ptax2], [Ptax3], [Ptax4], [Ptax5]," &
                " [Ptax6], [Ptax7], [Ptax8], [UserID], [LastModify], [CreateDate], [ControlID]) V" &
                "ALUES (@TaxationID, @TaxImmunity, @Tax1, @Tax2, @Tax3, @Tax4, @Tax5, @Tax6, @Tax" &
                "7, @Tax8, @Ptax1, @Ptax2, @Ptax3, @Ptax4, @Ptax5, @Ptax6, @Ptax7, @Ptax8, @UserI" &
                "D, @LastModify, @CreateDate, @ControlID);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT TaxationID, TaxImmunity, Tax1," &
                " Tax2, Tax3, Tax4, Tax5, Tax6, Tax7, Tax8, Ptax1, Ptax2, Ptax3, Ptax4, Ptax5, Pt" &
                "ax6, Ptax7, Ptax8, UserID, LastModify, CreateDate, ControlID FROM SetupTax WHERE" &
                " (TaxationID = @TaxationID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TaxationID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TaxationID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TaxImmunity", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TaxImmunity", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tax1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tax2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tax3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax3", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tax4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax4", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tax5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax5", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tax6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax6", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tax7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax7", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tax8", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax8", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ptax1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ptax2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ptax3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax3", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ptax4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax4", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ptax5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax5", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ptax6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax6", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ptax7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax7", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ptax8", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax8", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastModify", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastModify", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreateDate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreateDate", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ControlID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ControlID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SetupTax] SET [TaxationID] = @TaxationID, [TaxImmunity] = @TaxImmunity, [" &
                "Tax1] = @Tax1, [Tax2] = @Tax2, [Tax3] = @Tax3, [Tax4] = @Tax4, [Tax5] = @Tax5, [" &
                "Tax6] = @Tax6, [Tax7] = @Tax7, [Tax8] = @Tax8, [Ptax1] = @Ptax1, [Ptax2] = @Ptax" &
                "2, [Ptax3] = @Ptax3, [Ptax4] = @Ptax4, [Ptax5] = @Ptax5, [Ptax6] = @Ptax6, [Ptax" &
                "7] = @Ptax7, [Ptax8] = @Ptax8, [UserID] = @UserID, [LastModify] = @LastModify, [" &
                "CreateDate] = @CreateDate, [ControlID] = @ControlID WHERE (([TaxationID] = @Orig" &
                "inal_TaxationID) AND ((@IsNull_TaxImmunity = 1 AND [TaxImmunity] IS NULL) OR ([T" &
                "axImmunity] = @Original_TaxImmunity)) AND ((@IsNull_Tax1 = 1 AND [Tax1] IS NULL)" &
                " OR ([Tax1] = @Original_Tax1)) AND ((@IsNull_Tax2 = 1 AND [Tax2] IS NULL) OR ([T" &
                "ax2] = @Original_Tax2)) AND ((@IsNull_Tax3 = 1 AND [Tax3] IS NULL) OR ([Tax3] = " &
                "@Original_Tax3)) AND ((@IsNull_Tax4 = 1 AND [Tax4] IS NULL) OR ([Tax4] = @Origin" &
                "al_Tax4)) AND ((@IsNull_Tax5 = 1 AND [Tax5] IS NULL) OR ([Tax5] = @Original_Tax5" &
                ")) AND ((@IsNull_Tax6 = 1 AND [Tax6] IS NULL) OR ([Tax6] = @Original_Tax6)) AND " &
                "((@IsNull_Tax7 = 1 AND [Tax7] IS NULL) OR ([Tax7] = @Original_Tax7)) AND ((@IsNu" &
                "ll_Tax8 = 1 AND [Tax8] IS NULL) OR ([Tax8] = @Original_Tax8)) AND ((@IsNull_Ptax" &
                "1 = 1 AND [Ptax1] IS NULL) OR ([Ptax1] = @Original_Ptax1)) AND ((@IsNull_Ptax2 =" &
                " 1 AND [Ptax2] IS NULL) OR ([Ptax2] = @Original_Ptax2)) AND ((@IsNull_Ptax3 = 1 " &
                "AND [Ptax3] IS NULL) OR ([Ptax3] = @Original_Ptax3)) AND ((@IsNull_Ptax4 = 1 AND" &
                " [Ptax4] IS NULL) OR ([Ptax4] = @Original_Ptax4)) AND ((@IsNull_Ptax5 = 1 AND [P" &
                "tax5] IS NULL) OR ([Ptax5] = @Original_Ptax5)) AND ((@IsNull_Ptax6 = 1 AND [Ptax" &
                "6] IS NULL) OR ([Ptax6] = @Original_Ptax6)) AND ((@IsNull_Ptax7 = 1 AND [Ptax7] " &
                "IS NULL) OR ([Ptax7] = @Original_Ptax7)) AND ((@IsNull_Ptax8 = 1 AND [Ptax8] IS " &
                "NULL) OR ([Ptax8] = @Original_Ptax8)) AND ((@IsNull_UserID = 1 AND [UserID] IS N" &
                "ULL) OR ([UserID] = @Original_UserID)) AND ((@IsNull_LastModify = 1 AND [LastMod" &
                "ify] IS NULL) OR ([LastModify] = @Original_LastModify)) AND ((@IsNull_CreateDate" &
                " = 1 AND [CreateDate] IS NULL) OR ([CreateDate] = @Original_CreateDate)) AND ((@" &
                "IsNull_ControlID = 1 AND [ControlID] IS NULL) OR ([ControlID] = @Original_Contro" &
                "lID)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT TaxationID, TaxImmunity, Tax1, Tax2, Tax3, Tax4, Tax5, Tax6, Tax" &
                "7, Tax8, Ptax1, Ptax2, Ptax3, Ptax4, Ptax5, Ptax6, Ptax7, Ptax8, UserID, LastMod" &
                "ify, CreateDate, ControlID FROM SetupTax WHERE (TaxationID = @TaxationID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TaxationID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TaxationID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TaxImmunity", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TaxImmunity", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tax1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tax2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tax3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax3", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tax4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax4", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tax5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax5", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tax6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax6", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tax7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax7", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tax8", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax8", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ptax1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ptax2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ptax3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax3", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ptax4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax4", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ptax5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax5", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ptax6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax6", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ptax7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax7", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Ptax8", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax8", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastModify", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastModify", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreateDate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreateDate", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ControlID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ControlID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TaxationID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TaxationID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TaxImmunity", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TaxImmunity", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TaxImmunity", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TaxImmunity", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tax1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tax1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tax2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tax2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tax3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax3", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tax3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax3", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tax4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax4", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tax4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax4", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tax5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax5", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tax5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax5", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tax6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax6", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tax6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax6", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tax7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax7", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tax7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax7", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Tax8", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax8", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Tax8", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Tax8", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ptax1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ptax1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ptax2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ptax2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ptax3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax3", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ptax3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax3", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ptax4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax4", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ptax4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax4", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ptax5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax5", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ptax5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax5", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ptax6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax6", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ptax6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax6", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ptax7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax7", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ptax7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax7", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Ptax8", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax8", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Ptax8", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Ptax8", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserID", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LastModify", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastModify", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LastModify", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastModify", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CreateDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreateDate", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CreateDate", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreateDate", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ControlID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ControlID", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ControlID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ControlID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.BaniasEnergy.My.MySettings.Default.BaniasEnergyDBConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        TaxationID, TaxImmunity, Tax1, Tax2, Tax3, Tax4, Tax5, Tax6, Tax7, " &
                "Tax8, Ptax1, Ptax2, Ptax3, Ptax4, Ptax5, Ptax6, Ptax7, Ptax8, UserID, LastModify" &
                ", CreateDate, ControlID" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            SetupTax"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)>
        Public Overridable Overloads Function Fill(ByVal dataTable As SetupSalaryDataSet.SetupTaxDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)>
        Public Overridable Overloads Function GetData() As SetupSalaryDataSet.SetupTaxDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SetupSalaryDataSet.SetupTaxDataTable = New SetupSalaryDataSet.SetupTaxDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Overloads Function Update(ByVal dataTable As SetupSalaryDataSet.SetupTaxDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Overloads Function Update(ByVal dataSet As SetupSalaryDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "SetupTax")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)>
        Public Overridable Overloads Function Delete(
                    ByVal Original_TaxationID As Integer,
                    ByVal Original_TaxImmunity As Global.System.Nullable(Of Integer),
                    ByVal Original_Tax1 As Global.System.Nullable(Of Integer),
                    ByVal Original_Tax2 As Global.System.Nullable(Of Integer),
                    ByVal Original_Tax3 As Global.System.Nullable(Of Integer),
                    ByVal Original_Tax4 As Global.System.Nullable(Of Integer),
                    ByVal Original_Tax5 As Global.System.Nullable(Of Integer),
                    ByVal Original_Tax6 As Global.System.Nullable(Of Integer),
                    ByVal Original_Tax7 As Global.System.Nullable(Of Integer),
                    ByVal Original_Tax8 As Global.System.Nullable(Of Integer),
                    ByVal Original_Ptax1 As Global.System.Nullable(Of Integer),
                    ByVal Original_Ptax2 As Global.System.Nullable(Of Integer),
                    ByVal Original_Ptax3 As Global.System.Nullable(Of Integer),
                    ByVal Original_Ptax4 As Global.System.Nullable(Of Integer),
                    ByVal Original_Ptax5 As Global.System.Nullable(Of Integer),
                    ByVal Original_Ptax6 As Global.System.Nullable(Of Integer),
                    ByVal Original_Ptax7 As Global.System.Nullable(Of Integer),
                    ByVal Original_Ptax8 As Global.System.Nullable(Of Integer),
                    ByVal Original_UserID As Global.System.Nullable(Of Integer),
                    ByVal Original_LastModify As String,
                    ByVal Original_CreateDate As String,
                    ByVal Original_ControlID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_TaxationID, Integer)
            If (Original_TaxImmunity.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_TaxImmunity.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_Tax1.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Tax1.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_Tax2.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Tax2.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_Tax3.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Tax3.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_Tax4.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Tax4.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_Tax5.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Tax5.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_Tax6.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Tax6.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_Tax7.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Tax7.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_Tax8.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Tax8.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_Ptax1.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_Ptax1.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_Ptax2.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_Ptax2.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_Ptax3.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_Ptax3.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_Ptax4.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_Ptax4.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_Ptax5.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_Ptax5.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_Ptax6.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_Ptax6.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_Ptax7.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_Ptax7.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_Ptax8.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_Ptax8.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_UserID.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_UserID.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_LastModify Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_LastModify, String)
            End If
            If (Original_CreateDate Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_CreateDate, String)
            End If
            If (Original_ControlID.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_ControlID.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)>
        Public Overridable Overloads Function Insert(
                    ByVal TaxationID As Integer,
                    ByVal TaxImmunity As Global.System.Nullable(Of Integer),
                    ByVal Tax1 As Global.System.Nullable(Of Integer),
                    ByVal Tax2 As Global.System.Nullable(Of Integer),
                    ByVal Tax3 As Global.System.Nullable(Of Integer),
                    ByVal Tax4 As Global.System.Nullable(Of Integer),
                    ByVal Tax5 As Global.System.Nullable(Of Integer),
                    ByVal Tax6 As Global.System.Nullable(Of Integer),
                    ByVal Tax7 As Global.System.Nullable(Of Integer),
                    ByVal Tax8 As Global.System.Nullable(Of Integer),
                    ByVal Ptax1 As Global.System.Nullable(Of Integer),
                    ByVal Ptax2 As Global.System.Nullable(Of Integer),
                    ByVal Ptax3 As Global.System.Nullable(Of Integer),
                    ByVal Ptax4 As Global.System.Nullable(Of Integer),
                    ByVal Ptax5 As Global.System.Nullable(Of Integer),
                    ByVal Ptax6 As Global.System.Nullable(Of Integer),
                    ByVal Ptax7 As Global.System.Nullable(Of Integer),
                    ByVal Ptax8 As Global.System.Nullable(Of Integer),
                    ByVal UserID As Global.System.Nullable(Of Integer),
                    ByVal LastModify As String,
                    ByVal CreateDate As String,
                    ByVal ControlID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(TaxationID, Integer)
            If (TaxImmunity.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(TaxImmunity.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Tax1.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Tax1.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Tax2.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Tax2.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Tax3.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Tax3.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Tax4.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Tax4.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Tax5.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Tax5.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Tax6.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Tax6.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Tax7.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Tax7.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Tax8.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Tax8.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Ptax1.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Ptax1.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Ptax2.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Ptax2.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Ptax3.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Ptax3.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Ptax4.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Ptax4.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Ptax5.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Ptax5.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Ptax6.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Ptax6.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Ptax7.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Ptax7.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Ptax8.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Ptax8.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (UserID.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(UserID.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (LastModify Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(LastModify, String)
            End If
            If (CreateDate Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(CreateDate, String)
            End If
            If (ControlID.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(ControlID.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
        Public Overridable Overloads Function Update(
                    ByVal TaxationID As Integer,
                    ByVal TaxImmunity As Global.System.Nullable(Of Integer),
                    ByVal Tax1 As Global.System.Nullable(Of Integer),
                    ByVal Tax2 As Global.System.Nullable(Of Integer),
                    ByVal Tax3 As Global.System.Nullable(Of Integer),
                    ByVal Tax4 As Global.System.Nullable(Of Integer),
                    ByVal Tax5 As Global.System.Nullable(Of Integer),
                    ByVal Tax6 As Global.System.Nullable(Of Integer),
                    ByVal Tax7 As Global.System.Nullable(Of Integer),
                    ByVal Tax8 As Global.System.Nullable(Of Integer),
                    ByVal Ptax1 As Global.System.Nullable(Of Integer),
                    ByVal Ptax2 As Global.System.Nullable(Of Integer),
                    ByVal Ptax3 As Global.System.Nullable(Of Integer),
                    ByVal Ptax4 As Global.System.Nullable(Of Integer),
                    ByVal Ptax5 As Global.System.Nullable(Of Integer),
                    ByVal Ptax6 As Global.System.Nullable(Of Integer),
                    ByVal Ptax7 As Global.System.Nullable(Of Integer),
                    ByVal Ptax8 As Global.System.Nullable(Of Integer),
                    ByVal UserID As Global.System.Nullable(Of Integer),
                    ByVal LastModify As String,
                    ByVal CreateDate As String,
                    ByVal ControlID As Global.System.Nullable(Of Integer),
                    ByVal Original_TaxationID As Integer,
                    ByVal Original_TaxImmunity As Global.System.Nullable(Of Integer),
                    ByVal Original_Tax1 As Global.System.Nullable(Of Integer),
                    ByVal Original_Tax2 As Global.System.Nullable(Of Integer),
                    ByVal Original_Tax3 As Global.System.Nullable(Of Integer),
                    ByVal Original_Tax4 As Global.System.Nullable(Of Integer),
                    ByVal Original_Tax5 As Global.System.Nullable(Of Integer),
                    ByVal Original_Tax6 As Global.System.Nullable(Of Integer),
                    ByVal Original_Tax7 As Global.System.Nullable(Of Integer),
                    ByVal Original_Tax8 As Global.System.Nullable(Of Integer),
                    ByVal Original_Ptax1 As Global.System.Nullable(Of Integer),
                    ByVal Original_Ptax2 As Global.System.Nullable(Of Integer),
                    ByVal Original_Ptax3 As Global.System.Nullable(Of Integer),
                    ByVal Original_Ptax4 As Global.System.Nullable(Of Integer),
                    ByVal Original_Ptax5 As Global.System.Nullable(Of Integer),
                    ByVal Original_Ptax6 As Global.System.Nullable(Of Integer),
                    ByVal Original_Ptax7 As Global.System.Nullable(Of Integer),
                    ByVal Original_Ptax8 As Global.System.Nullable(Of Integer),
                    ByVal Original_UserID As Global.System.Nullable(Of Integer),
                    ByVal Original_LastModify As String,
                    ByVal Original_CreateDate As String,
                    ByVal Original_ControlID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(TaxationID, Integer)
            If (TaxImmunity.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(TaxImmunity.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Tax1.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Tax1.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Tax2.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Tax2.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Tax3.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Tax3.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Tax4.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Tax4.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Tax5.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Tax5.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Tax6.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Tax6.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Tax7.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Tax7.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Tax8.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Tax8.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Ptax1.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Ptax1.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Ptax2.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Ptax2.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Ptax3.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Ptax3.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Ptax4.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Ptax4.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Ptax5.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Ptax5.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Ptax6.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Ptax6.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Ptax7.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Ptax7.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Ptax8.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Ptax8.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (UserID.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(UserID.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (LastModify Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(LastModify, String)
            End If
            If (CreateDate Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(CreateDate, String)
            End If
            If (ControlID.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(ControlID.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_TaxationID, Integer)
            If (Original_TaxImmunity.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_TaxImmunity.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_Tax1.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_Tax1.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_Tax2.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_Tax2.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_Tax3.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_Tax3.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_Tax4.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_Tax4.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_Tax5.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_Tax5.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_Tax6.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_Tax6.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_Tax7.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_Tax7.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_Tax8.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_Tax8.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_Ptax1.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_Ptax1.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_Ptax2.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_Ptax2.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_Ptax3.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_Ptax3.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Original_Ptax4.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_Ptax4.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (Original_Ptax5.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_Ptax5.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (Original_Ptax6.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_Ptax6.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (Original_Ptax7.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_Ptax7.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (Original_Ptax8.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_Ptax8.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (Original_UserID.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(Original_UserID.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (Original_LastModify Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(Original_LastModify, String)
            End If
            If (Original_CreateDate Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(Original_CreateDate, String)
            End If
            If (Original_ControlID.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Original_ControlID.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
        Public Overridable Overloads Function Update(
                    ByVal TaxImmunity As Global.System.Nullable(Of Integer),
                    ByVal Tax1 As Global.System.Nullable(Of Integer),
                    ByVal Tax2 As Global.System.Nullable(Of Integer),
                    ByVal Tax3 As Global.System.Nullable(Of Integer),
                    ByVal Tax4 As Global.System.Nullable(Of Integer),
                    ByVal Tax5 As Global.System.Nullable(Of Integer),
                    ByVal Tax6 As Global.System.Nullable(Of Integer),
                    ByVal Tax7 As Global.System.Nullable(Of Integer),
                    ByVal Tax8 As Global.System.Nullable(Of Integer),
                    ByVal Ptax1 As Global.System.Nullable(Of Integer),
                    ByVal Ptax2 As Global.System.Nullable(Of Integer),
                    ByVal Ptax3 As Global.System.Nullable(Of Integer),
                    ByVal Ptax4 As Global.System.Nullable(Of Integer),
                    ByVal Ptax5 As Global.System.Nullable(Of Integer),
                    ByVal Ptax6 As Global.System.Nullable(Of Integer),
                    ByVal Ptax7 As Global.System.Nullable(Of Integer),
                    ByVal Ptax8 As Global.System.Nullable(Of Integer),
                    ByVal UserID As Global.System.Nullable(Of Integer),
                    ByVal LastModify As String,
                    ByVal CreateDate As String,
                    ByVal ControlID As Global.System.Nullable(Of Integer),
                    ByVal Original_TaxationID As Integer,
                    ByVal Original_TaxImmunity As Global.System.Nullable(Of Integer),
                    ByVal Original_Tax1 As Global.System.Nullable(Of Integer),
                    ByVal Original_Tax2 As Global.System.Nullable(Of Integer),
                    ByVal Original_Tax3 As Global.System.Nullable(Of Integer),
                    ByVal Original_Tax4 As Global.System.Nullable(Of Integer),
                    ByVal Original_Tax5 As Global.System.Nullable(Of Integer),
                    ByVal Original_Tax6 As Global.System.Nullable(Of Integer),
                    ByVal Original_Tax7 As Global.System.Nullable(Of Integer),
                    ByVal Original_Tax8 As Global.System.Nullable(Of Integer),
                    ByVal Original_Ptax1 As Global.System.Nullable(Of Integer),
                    ByVal Original_Ptax2 As Global.System.Nullable(Of Integer),
                    ByVal Original_Ptax3 As Global.System.Nullable(Of Integer),
                    ByVal Original_Ptax4 As Global.System.Nullable(Of Integer),
                    ByVal Original_Ptax5 As Global.System.Nullable(Of Integer),
                    ByVal Original_Ptax6 As Global.System.Nullable(Of Integer),
                    ByVal Original_Ptax7 As Global.System.Nullable(Of Integer),
                    ByVal Original_Ptax8 As Global.System.Nullable(Of Integer),
                    ByVal Original_UserID As Global.System.Nullable(Of Integer),
                    ByVal Original_LastModify As String,
                    ByVal Original_CreateDate As String,
                    ByVal Original_ControlID As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_TaxationID, TaxImmunity, Tax1, Tax2, Tax3, Tax4, Tax5, Tax6, Tax7, Tax8, Ptax1, Ptax2, Ptax3, Ptax4, Ptax5, Ptax6, Ptax7, Ptax8, UserID, LastModify, CreateDate, ControlID, Original_TaxationID, Original_TaxImmunity, Original_Tax1, Original_Tax2, Original_Tax3, Original_Tax4, Original_Tax5, Original_Tax6, Original_Tax7, Original_Tax8, Original_Ptax1, Original_Ptax2, Original_Ptax3, Original_Ptax4, Original_Ptax5, Original_Ptax6, Original_Ptax7, Original_Ptax8, Original_UserID, Original_LastModify, Original_CreateDate, Original_ControlID)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),
     Global.System.ComponentModel.ToolboxItem(True),
     Global.System.ComponentModel.DataObjectAttribute(True),
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" &
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
    Partial Public Class TypeSpecializeValuesTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _transaction As Global.System.Data.SqlClient.SqlTransaction

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TypeSpecializeValues"
            tableMapping.ColumnMappings.Add("TypeSpecializeID", "TypeSpecializeID")
            tableMapping.ColumnMappings.Add("TypeSpecializeName", "TypeSpecializeName")
            tableMapping.ColumnMappings.Add("TypeSpecializeValue", "TypeSpecializeValue")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [TypeSpecializeValues] WHERE (([TypeSpecializeID] = @Original_TypeSpe" &
                "cializeID) AND ((@IsNull_TypeSpecializeName = 1 AND [TypeSpecializeName] IS NULL" &
                ") OR ([TypeSpecializeName] = @Original_TypeSpecializeName)) AND ((@IsNull_TypeSp" &
                "ecializeValue = 1 AND [TypeSpecializeValue] IS NULL) OR ([TypeSpecializeValue] =" &
                " @Original_TypeSpecializeValue)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypeSpecializeID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeSpecializeID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypeSpecializeName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeSpecializeName", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypeSpecializeName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeSpecializeName", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypeSpecializeValue", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeSpecializeValue", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypeSpecializeValue", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeSpecializeValue", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [TypeSpecializeValues] ([TypeSpecializeID], [TypeSpecializeName], [Ty" &
                "peSpecializeValue]) VALUES (@TypeSpecializeID, @TypeSpecializeName, @TypeSpecial" &
                "izeValue);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT TypeSpecializeID, TypeSpecializeName, TypeSpecializeValue FRO" &
                "M TypeSpecializeValues WHERE (TypeSpecializeID = @TypeSpecializeID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeSpecializeID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeSpecializeID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeSpecializeName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeSpecializeName", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeSpecializeValue", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeSpecializeValue", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [TypeSpecializeValues] SET [TypeSpecializeID] = @TypeSpecializeID, [TypeSp" &
                "ecializeName] = @TypeSpecializeName, [TypeSpecializeValue] = @TypeSpecializeValu" &
                "e WHERE (([TypeSpecializeID] = @Original_TypeSpecializeID) AND ((@IsNull_TypeSpe" &
                "cializeName = 1 AND [TypeSpecializeName] IS NULL) OR ([TypeSpecializeName] = @Or" &
                "iginal_TypeSpecializeName)) AND ((@IsNull_TypeSpecializeValue = 1 AND [TypeSpeci" &
                "alizeValue] IS NULL) OR ([TypeSpecializeValue] = @Original_TypeSpecializeValue))" &
                ");" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT TypeSpecializeID, TypeSpecializeName, TypeSpecializeValue FROM TypeSp" &
                "ecializeValues WHERE (TypeSpecializeID = @TypeSpecializeID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeSpecializeID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeSpecializeID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeSpecializeName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeSpecializeName", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeSpecializeValue", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeSpecializeValue", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypeSpecializeID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeSpecializeID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypeSpecializeName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeSpecializeName", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypeSpecializeName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeSpecializeName", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypeSpecializeValue", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeSpecializeValue", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypeSpecializeValue", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeSpecializeValue", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.BaniasEnergy.My.MySettings.Default.BaniasEnergyDBConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        TypeSpecializeID, TypeSpecializeName, TypeSpecializeValue" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM    " &
                "        TypeSpecializeValues"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)>
        Public Overridable Overloads Function Fill(ByVal dataTable As SetupSalaryDataSet.TypeSpecializeValuesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)>
        Public Overridable Overloads Function GetData() As SetupSalaryDataSet.TypeSpecializeValuesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SetupSalaryDataSet.TypeSpecializeValuesDataTable = New SetupSalaryDataSet.TypeSpecializeValuesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Overloads Function Update(ByVal dataTable As SetupSalaryDataSet.TypeSpecializeValuesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Overloads Function Update(ByVal dataSet As SetupSalaryDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "TypeSpecializeValues")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)>
        Public Overridable Overloads Function Delete(ByVal Original_TypeSpecializeID As Integer, ByVal Original_TypeSpecializeName As String, ByVal Original_TypeSpecializeValue As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_TypeSpecializeID, Integer)
            If (Original_TypeSpecializeName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_TypeSpecializeName, String)
            End If
            If (Original_TypeSpecializeValue.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_TypeSpecializeValue.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)>
        Public Overridable Overloads Function Insert(ByVal TypeSpecializeID As Integer, ByVal TypeSpecializeName As String, ByVal TypeSpecializeValue As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(TypeSpecializeID, Integer)
            If (TypeSpecializeName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(TypeSpecializeName, String)
            End If
            If (TypeSpecializeValue.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(TypeSpecializeValue.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
        Public Overridable Overloads Function Update(ByVal TypeSpecializeID As Integer, ByVal TypeSpecializeName As String, ByVal TypeSpecializeValue As Global.System.Nullable(Of Double), ByVal Original_TypeSpecializeID As Integer, ByVal Original_TypeSpecializeName As String, ByVal Original_TypeSpecializeValue As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(TypeSpecializeID, Integer)
            If (TypeSpecializeName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(TypeSpecializeName, String)
            End If
            If (TypeSpecializeValue.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(TypeSpecializeValue.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_TypeSpecializeID, Integer)
            If (Original_TypeSpecializeName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_TypeSpecializeName, String)
            End If
            If (Original_TypeSpecializeValue.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_TypeSpecializeValue.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
        Public Overridable Overloads Function Update(ByVal TypeSpecializeName As String, ByVal TypeSpecializeValue As Global.System.Nullable(Of Double), ByVal Original_TypeSpecializeID As Integer, ByVal Original_TypeSpecializeName As String, ByVal Original_TypeSpecializeValue As Global.System.Nullable(Of Double)) As Integer
            Return Me.Update(Original_TypeSpecializeID, TypeSpecializeName, TypeSpecializeValue, Original_TypeSpecializeID, Original_TypeSpecializeName, Original_TypeSpecializeValue)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),
     Global.System.ComponentModel.ToolboxItem(True),
     Global.System.ComponentModel.DataObjectAttribute(True),
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" &
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
    Partial Public Class MutableSettingTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _transaction As Global.System.Data.SqlClient.SqlTransaction

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MutableSetting"
            tableMapping.ColumnMappings.Add("MutableID", "MutableID")
            tableMapping.ColumnMappings.Add("MutableClass", "MutableClass")
            tableMapping.ColumnMappings.Add("MutableCost", "MutableCost")
            tableMapping.ColumnMappings.Add("MutableLimited", "MutableLimited")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [MutableSetting] WHERE (([MutableID] = @Original_MutableID) AND ([Mut" &
                "ableClass] = @Original_MutableClass) AND ([MutableCost] = @Original_MutableCost)" &
                " AND ([MutableLimited] = @Original_MutableLimited))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MutableID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MutableID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MutableClass", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MutableClass", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MutableCost", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MutableCost", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MutableLimited", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MutableLimited", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [MutableSetting] ([MutableID], [MutableClass], [MutableCost], [Mutabl" &
                "eLimited]) VALUES (@MutableID, @MutableClass, @MutableCost, @MutableLimited);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "S" &
                "ELECT MutableID, MutableClass, MutableCost, MutableLimited FROM MutableSetting W" &
                "HERE (MutableID = @MutableID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MutableID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MutableID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MutableClass", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MutableClass", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MutableCost", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MutableCost", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MutableLimited", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MutableLimited", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [MutableSetting] SET [MutableID] = @MutableID, [MutableClass] = @MutableCl" &
                "ass, [MutableCost] = @MutableCost, [MutableLimited] = @MutableLimited WHERE (([M" &
                "utableID] = @Original_MutableID) AND ([MutableClass] = @Original_MutableClass) A" &
                "ND ([MutableCost] = @Original_MutableCost) AND ([MutableLimited] = @Original_Mut" &
                "ableLimited));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT MutableID, MutableClass, MutableCost, MutableLimited FROM" &
                " MutableSetting WHERE (MutableID = @MutableID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MutableID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MutableID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MutableClass", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MutableClass", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MutableCost", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MutableCost", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MutableLimited", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MutableLimited", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MutableID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MutableID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MutableClass", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MutableClass", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MutableCost", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MutableCost", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MutableLimited", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MutableLimited", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.BaniasEnergy.My.MySettings.Default.BaniasEnergyDBConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        MutableID, MutableClass, MutableCost, MutableLimited" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM         " &
                "   MutableSetting"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)>
        Public Overridable Overloads Function Fill(ByVal dataTable As SetupSalaryDataSet.MutableSettingDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)>
        Public Overridable Overloads Function GetData() As SetupSalaryDataSet.MutableSettingDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SetupSalaryDataSet.MutableSettingDataTable = New SetupSalaryDataSet.MutableSettingDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Overloads Function Update(ByVal dataTable As SetupSalaryDataSet.MutableSettingDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Overloads Function Update(ByVal dataSet As SetupSalaryDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MutableSetting")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)>
        Public Overridable Overloads Function Delete(ByVal Original_MutableID As Integer, ByVal Original_MutableClass As Integer, ByVal Original_MutableCost As String, ByVal Original_MutableLimited As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MutableID, Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_MutableClass, Integer)
            If (Original_MutableCost Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MutableCost")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_MutableCost, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_MutableLimited, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)>
        Public Overridable Overloads Function Insert(ByVal MutableID As Integer, ByVal MutableClass As Integer, ByVal MutableCost As String, ByVal MutableLimited As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(MutableID, Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(MutableClass, Integer)
            If (MutableCost Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MutableCost")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MutableCost, String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(MutableLimited, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
        Public Overridable Overloads Function Update(ByVal MutableID As Integer, ByVal MutableClass As Integer, ByVal MutableCost As String, ByVal MutableLimited As Integer, ByVal Original_MutableID As Integer, ByVal Original_MutableClass As Integer, ByVal Original_MutableCost As String, ByVal Original_MutableLimited As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MutableID, Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MutableClass, Integer)
            If (MutableCost Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MutableCost")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MutableCost, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(MutableLimited, Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_MutableID, Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_MutableClass, Integer)
            If (Original_MutableCost Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MutableCost")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_MutableCost, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_MutableLimited, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
        Public Overridable Overloads Function Update(ByVal MutableClass As Integer, ByVal MutableCost As String, ByVal MutableLimited As Integer, ByVal Original_MutableID As Integer, ByVal Original_MutableClass As Integer, ByVal Original_MutableCost As String, ByVal Original_MutableLimited As Integer) As Integer
            Return Me.Update(Original_MutableID, MutableClass, MutableCost, MutableLimited, Original_MutableID, Original_MutableClass, Original_MutableCost, Original_MutableLimited)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),
     Global.System.ComponentModel.ToolboxItem(True),
     Global.System.ComponentModel.DataObjectAttribute(True),
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" &
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
    Partial Public Class SpecializeValuesTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _transaction As Global.System.Data.SqlClient.SqlTransaction

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SpecializeValues"
            tableMapping.ColumnMappings.Add("SpecializeID", "SpecializeID")
            tableMapping.ColumnMappings.Add("SpecializeName", "SpecializeName")
            tableMapping.ColumnMappings.Add("SpecializeValue", "SpecializeValue")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SpecializeValues] WHERE (([SpecializeID] = @Original_SpecializeID) A" &
                "ND ((@IsNull_SpecializeName = 1 AND [SpecializeName] IS NULL) OR ([SpecializeNam" &
                "e] = @Original_SpecializeName)) AND ((@IsNull_SpecializeValue = 1 AND [Specializ" &
                "eValue] IS NULL) OR ([SpecializeValue] = @Original_SpecializeValue)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SpecializeID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SpecializeID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SpecializeName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SpecializeName", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SpecializeName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SpecializeName", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SpecializeValue", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SpecializeValue", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SpecializeValue", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SpecializeValue", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [SpecializeValues] ([SpecializeID], [SpecializeName], [SpecializeValu" &
                "e]) VALUES (@SpecializeID, @SpecializeName, @SpecializeValue);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT Specializ" &
                "eID, SpecializeName, SpecializeValue FROM SpecializeValues WHERE (SpecializeID =" &
                " @SpecializeID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SpecializeID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SpecializeID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SpecializeName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SpecializeName", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SpecializeValue", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SpecializeValue", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SpecializeValues] SET [SpecializeID] = @SpecializeID, [SpecializeName] = " &
                "@SpecializeName, [SpecializeValue] = @SpecializeValue WHERE (([SpecializeID] = @" &
                "Original_SpecializeID) AND ((@IsNull_SpecializeName = 1 AND [SpecializeName] IS " &
                "NULL) OR ([SpecializeName] = @Original_SpecializeName)) AND ((@IsNull_Specialize" &
                "Value = 1 AND [SpecializeValue] IS NULL) OR ([SpecializeValue] = @Original_Speci" &
                "alizeValue)));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT SpecializeID, SpecializeName, SpecializeValue FROM Specia" &
                "lizeValues WHERE (SpecializeID = @SpecializeID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SpecializeID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SpecializeID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SpecializeName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SpecializeName", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SpecializeValue", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SpecializeValue", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SpecializeID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SpecializeID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SpecializeName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SpecializeName", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SpecializeName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SpecializeName", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SpecializeValue", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SpecializeValue", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SpecializeValue", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SpecializeValue", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.BaniasEnergy.My.MySettings.Default.BaniasEnergyDBConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        SpecializeID, SpecializeName, SpecializeValue" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            Spec" &
                "ializeValues"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)>
        Public Overridable Overloads Function Fill(ByVal dataTable As SetupSalaryDataSet.SpecializeValuesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)>
        Public Overridable Overloads Function GetData() As SetupSalaryDataSet.SpecializeValuesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SetupSalaryDataSet.SpecializeValuesDataTable = New SetupSalaryDataSet.SpecializeValuesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Overloads Function Update(ByVal dataTable As SetupSalaryDataSet.SpecializeValuesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Overloads Function Update(ByVal dataSet As SetupSalaryDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "SpecializeValues")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)>
        Public Overridable Overloads Function Delete(ByVal Original_SpecializeID As Integer, ByVal Original_SpecializeName As String, ByVal Original_SpecializeValue As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SpecializeID, Integer)
            If (Original_SpecializeName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SpecializeName, String)
            End If
            If (Original_SpecializeValue.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SpecializeValue.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)>
        Public Overridable Overloads Function Insert(ByVal SpecializeID As Integer, ByVal SpecializeName As String, ByVal SpecializeValue As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SpecializeID, Integer)
            If (SpecializeName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SpecializeName, String)
            End If
            If (SpecializeValue.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SpecializeValue.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
        Public Overridable Overloads Function Update(ByVal SpecializeID As Integer, ByVal SpecializeName As String, ByVal SpecializeValue As Global.System.Nullable(Of Double), ByVal Original_SpecializeID As Integer, ByVal Original_SpecializeName As String, ByVal Original_SpecializeValue As Global.System.Nullable(Of Double)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SpecializeID, Integer)
            If (SpecializeName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SpecializeName, String)
            End If
            If (SpecializeValue.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SpecializeValue.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_SpecializeID, Integer)
            If (Original_SpecializeName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_SpecializeName, String)
            End If
            If (Original_SpecializeValue.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_SpecializeValue.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
        Public Overridable Overloads Function Update(ByVal SpecializeName As String, ByVal SpecializeValue As Global.System.Nullable(Of Double), ByVal Original_SpecializeID As Integer, ByVal Original_SpecializeName As String, ByVal Original_SpecializeValue As Global.System.Nullable(Of Double)) As Integer
            Return Me.Update(Original_SpecializeID, SpecializeName, SpecializeValue, Original_SpecializeID, Original_SpecializeName, Original_SpecializeValue)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),
     Global.System.ComponentModel.ToolboxItem(True),
     Global.System.ComponentModel.DataObjectAttribute(True),
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" &
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
    Partial Public Class RestorePointsTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _transaction As Global.System.Data.SqlClient.SqlTransaction

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RestorePoints"
            tableMapping.ColumnMappings.Add("H_Date", "H_Date")
            tableMapping.ColumnMappings.Add("CID", "CID")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.BaniasEnergy.My.MySettings.Default.BaniasEnergyDBConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        H_Date, CID" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            RestorePoints" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "GROUP BY CID, H_Date" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "O" &
                "RDER BY CID DESC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)>
        Public Overridable Overloads Function Fill(ByVal dataTable As SetupSalaryDataSet.RestorePointsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)>
        Public Overridable Overloads Function GetData() As SetupSalaryDataSet.RestorePointsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SetupSalaryDataSet.RestorePointsDataTable = New SetupSalaryDataSet.RestorePointsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),
     Global.System.ComponentModel.ToolboxItem(True),
     Global.System.ComponentModel.DataObjectAttribute(True),
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" &
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
    Partial Public Class SalaryConstantsTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _transaction As Global.System.Data.SqlClient.SqlTransaction

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SalaryConstants"
            tableMapping.ColumnMappings.Add("SalaryConstID", "SalaryConstID")
            tableMapping.ColumnMappings.Add("Wife", "Wife")
            tableMapping.ColumnMappings.Add("Child1", "Child1")
            tableMapping.ColumnMappings.Add("Child2", "Child2")
            tableMapping.ColumnMappings.Add("Child3", "Child3")
            tableMapping.ColumnMappings.Add("OtherChild", "OtherChild")
            tableMapping.ColumnMappings.Add("TSpecialize", "TSpecialize")
            tableMapping.ColumnMappings.Add("Specialize", "Specialize")
            tableMapping.ColumnMappings.Add("TypeSpecialize", "TypeSpecialize")
            tableMapping.ColumnMappings.Add("SocialInsurance", "SocialInsurance")
            tableMapping.ColumnMappings.Add("CooperateBox", "CooperateBox")
            tableMapping.ColumnMappings.Add("CooperateBox1", "CooperateBox1")
            tableMapping.ColumnMappings.Add("CooperationWorkers", "CooperationWorkers")
            tableMapping.ColumnMappings.Add("EngCooperation", "EngCooperation")
            tableMapping.ColumnMappings.Add("habitation", "habitation")
            tableMapping.ColumnMappings.Add("AssistBox", "AssistBox")
            tableMapping.ColumnMappings.Add("Typo", "Typo")
            tableMapping.ColumnMappings.Add("DeathAssist", "DeathAssist")
            tableMapping.ColumnMappings.Add("EndService", "EndService")
            tableMapping.ColumnMappings.Add("EngFarm", "EngFarm")
            tableMapping.ColumnMappings.Add("stipendInsurance", "stipendInsurance")
            tableMapping.ColumnMappings.Add("TaxImmunity", "TaxImmunity")
            tableMapping.ColumnMappings.Add("ControlID", "ControlID")
            tableMapping.ColumnMappings.Add("CleanerCost", "CleanerCost")
            tableMapping.ColumnMappings.Add("WorkerTax", "WorkerTax")
            tableMapping.ColumnMappings.Add("ST1", "ST1")
            tableMapping.ColumnMappings.Add("ST2", "ST2")
            tableMapping.ColumnMappings.Add("ST3", "ST3")
            tableMapping.ColumnMappings.Add("ST4", "ST4")
            tableMapping.ColumnMappings.Add("ST5", "ST5")
            tableMapping.ColumnMappings.Add("ST6", "ST6")
            tableMapping.ColumnMappings.Add("ST7", "ST7")
            tableMapping.ColumnMappings.Add("ST8", "ST8")
            tableMapping.ColumnMappings.Add("ST9", "ST9")
            tableMapping.ColumnMappings.Add("ST10", "ST10")
            tableMapping.ColumnMappings.Add("ST11", "ST11")
            tableMapping.ColumnMappings.Add("ST12", "ST12")
            tableMapping.ColumnMappings.Add("ST13", "ST13")
            tableMapping.ColumnMappings.Add("T1", "T1")
            tableMapping.ColumnMappings.Add("T2", "T2")
            tableMapping.ColumnMappings.Add("T3", "T3")
            tableMapping.ColumnMappings.Add("T4", "T4")
            tableMapping.ColumnMappings.Add("T5", "T5")
            tableMapping.ColumnMappings.Add("Manag", "Manag")
            tableMapping.ColumnMappings.Add("IdelDeathAssist", "IdelDeathAssist")
            tableMapping.ColumnMappings.Add("Class1", "Class1")
            tableMapping.ColumnMappings.Add("Class2", "Class2")
            tableMapping.ColumnMappings.Add("Class3", "Class3")
            tableMapping.ColumnMappings.Add("Class4", "Class4")
            tableMapping.ColumnMappings.Add("Class5", "Class5")
            tableMapping.ColumnMappings.Add("OldClass1", "OldClass1")
            tableMapping.ColumnMappings.Add("OldClass2", "OldClass2")
            tableMapping.ColumnMappings.Add("OldClass3", "OldClass3")
            tableMapping.ColumnMappings.Add("OldClass4", "OldClass4")
            tableMapping.ColumnMappings.Add("OldClass5", "OldClass5")
            tableMapping.ColumnMappings.Add("OverWday", "OverWday")
            tableMapping.ColumnMappings.Add("OverWNight", "OverWNight")
            tableMapping.ColumnMappings.Add("WorkOhr", "WorkOhr")
            tableMapping.ColumnMappings.Add("IsOldEfficts", "IsOldEfficts")
            tableMapping.ColumnMappings.Add("TopWoValue1", "TopWoValue1")
            tableMapping.ColumnMappings.Add("TopWoValue2", "TopWoValue2")
            tableMapping.ColumnMappings.Add("TopWoValue3", "TopWoValue3")
            tableMapping.ColumnMappings.Add("TopWoValue4", "TopWoValue4")
            tableMapping.ColumnMappings.Add("TopWoValue5", "TopWoValue5")
            tableMapping.ColumnMappings.Add("Qhelp1", "Qhelp1")
            tableMapping.ColumnMappings.Add("Qhelp2", "Qhelp2")
            tableMapping.ColumnMappings.Add("AvgMutable", "AvgMutable")
            tableMapping.ColumnMappings.Add("AllowancePerc", "AllowancePerc")
            tableMapping.ColumnMappings.Add("AllowanceDays", "AllowanceDays")
            tableMapping.ColumnMappings.Add("DangerV", "DangerV")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [SalaryConstants] WHERE (([SalaryConstID] = @Original_SalaryConstID) " &
                "AND ((@IsNull_Wife = 1 AND [Wife] IS NULL) OR ([Wife] = @Original_Wife)) AND ((@" &
                "IsNull_Child1 = 1 AND [Child1] IS NULL) OR ([Child1] = @Original_Child1)) AND ((" &
                "@IsNull_Child2 = 1 AND [Child2] IS NULL) OR ([Child2] = @Original_Child2)) AND (" &
                "(@IsNull_Child3 = 1 AND [Child3] IS NULL) OR ([Child3] = @Original_Child3)) AND " &
                "((@IsNull_OtherChild = 1 AND [OtherChild] IS NULL) OR ([OtherChild] = @Original_" &
                "OtherChild)) AND ((@IsNull_TSpecialize = 1 AND [TSpecialize] IS NULL) OR ([TSpec" &
                "ialize] = @Original_TSpecialize)) AND ((@IsNull_Specialize = 1 AND [Specialize] " &
                "IS NULL) OR ([Specialize] = @Original_Specialize)) AND ((@IsNull_TypeSpecialize " &
                "= 1 AND [TypeSpecialize] IS NULL) OR ([TypeSpecialize] = @Original_TypeSpecializ" &
                "e)) AND ((@IsNull_SocialInsurance = 1 AND [SocialInsurance] IS NULL) OR ([Social" &
                "Insurance] = @Original_SocialInsurance)) AND ((@IsNull_CooperateBox = 1 AND [Coo" &
                "perateBox] IS NULL) OR ([CooperateBox] = @Original_CooperateBox)) AND ((@IsNull_" &
                "CooperateBox1 = 1 AND [CooperateBox1] IS NULL) OR ([CooperateBox1] = @Original_C" &
                "ooperateBox1)) AND ((@IsNull_CooperationWorkers = 1 AND [CooperationWorkers] IS " &
                "NULL) OR ([CooperationWorkers] = @Original_CooperationWorkers)) AND ((@IsNull_En" &
                "gCooperation = 1 AND [EngCooperation] IS NULL) OR ([EngCooperation] = @Original_" &
                "EngCooperation)) AND ((@IsNull_habitation = 1 AND [habitation] IS NULL) OR ([hab" &
                "itation] = @Original_habitation)) AND ((@IsNull_AssistBox = 1 AND [AssistBox] IS" &
                " NULL) OR ([AssistBox] = @Original_AssistBox)) AND ((@IsNull_Typo = 1 AND [Typo]" &
                " IS NULL) OR ([Typo] = @Original_Typo)) AND ((@IsNull_DeathAssist = 1 AND [Death" &
                "Assist] IS NULL) OR ([DeathAssist] = @Original_DeathAssist)) AND ((@IsNull_EndSe" &
                "rvice = 1 AND [EndService] IS NULL) OR ([EndService] = @Original_EndService)) AN" &
                "D ((@IsNull_EngFarm = 1 AND [EngFarm] IS NULL) OR ([EngFarm] = @Original_EngFarm" &
                ")) AND ((@IsNull_stipendInsurance = 1 AND [stipendInsurance] IS NULL) OR ([stipe" &
                "ndInsurance] = @Original_stipendInsurance)) AND ((@IsNull_TaxImmunity = 1 AND [T" &
                "axImmunity] IS NULL) OR ([TaxImmunity] = @Original_TaxImmunity)) AND ((@IsNull_C" &
                "ontrolID = 1 AND [ControlID] IS NULL) OR ([ControlID] = @Original_ControlID)) AN" &
                "D ((@IsNull_CleanerCost = 1 AND [CleanerCost] IS NULL) OR ([CleanerCost] = @Orig" &
                "inal_CleanerCost)) AND ((@IsNull_WorkerTax = 1 AND [WorkerTax] IS NULL) OR ([Wor" &
                "kerTax] = @Original_WorkerTax)) AND ((@IsNull_ST1 = 1 AND [ST1] IS NULL) OR ([ST" &
                "1] = @Original_ST1)) AND ((@IsNull_ST2 = 1 AND [ST2] IS NULL) OR ([ST2] = @Origi" &
                "nal_ST2)) AND ((@IsNull_ST3 = 1 AND [ST3] IS NULL) OR ([ST3] = @Original_ST3)) A" &
                "ND ((@IsNull_ST4 = 1 AND [ST4] IS NULL) OR ([ST4] = @Original_ST4)) AND ((@IsNul" &
                "l_ST5 = 1 AND [ST5] IS NULL) OR ([ST5] = @Original_ST5)) AND ((@IsNull_ST6 = 1 A" &
                "ND [ST6] IS NULL) OR ([ST6] = @Original_ST6)) AND ((@IsNull_ST7 = 1 AND [ST7] IS" &
                " NULL) OR ([ST7] = @Original_ST7)) AND ((@IsNull_ST8 = 1 AND [ST8] IS NULL) OR (" &
                "[ST8] = @Original_ST8)) AND ((@IsNull_ST9 = 1 AND [ST9] IS NULL) OR ([ST9] = @Or" &
                "iginal_ST9)) AND ((@IsNull_ST10 = 1 AND [ST10] IS NULL) OR ([ST10] = @Original_S" &
                "T10)) AND ((@IsNull_ST11 = 1 AND [ST11] IS NULL) OR ([ST11] = @Original_ST11)) A" &
                "ND ((@IsNull_ST12 = 1 AND [ST12] IS NULL) OR ([ST12] = @Original_ST12)) AND ((@I" &
                "sNull_ST13 = 1 AND [ST13] IS NULL) OR ([ST13] = @Original_ST13)) AND ((@IsNull_T" &
                "1 = 1 AND [T1] IS NULL) OR ([T1] = @Original_T1)) AND ((@IsNull_T2 = 1 AND [T2] " &
                "IS NULL) OR ([T2] = @Original_T2)) AND ((@IsNull_T3 = 1 AND [T3] IS NULL) OR ([T" &
                "3] = @Original_T3)) AND ((@IsNull_T4 = 1 AND [T4] IS NULL) OR ([T4] = @Original_" &
                "T4)) AND ((@IsNull_T5 = 1 AND [T5] IS NULL) OR ([T5] = @Original_T5)) AND ((@IsN" &
                "ull_Manag = 1 AND [Manag] IS NULL) OR ([Manag] = @Original_Manag)) AND ((@IsNull" &
                "_IdelDeathAssist = 1 AND [IdelDeathAssist] IS NULL) OR ([IdelDeathAssist] = @Ori" &
                "ginal_IdelDeathAssist)) AND ((@IsNull_Class1 = 1 AND [Class1] IS NULL) OR ([Clas" &
                "s1] = @Original_Class1)) AND ((@IsNull_Class2 = 1 AND [Class2] IS NULL) OR ([Cla" &
                "ss2] = @Original_Class2)) AND ((@IsNull_Class3 = 1 AND [Class3] IS NULL) OR ([Cl" &
                "ass3] = @Original_Class3)) AND ((@IsNull_Class4 = 1 AND [Class4] IS NULL) OR ([C" &
                "lass4] = @Original_Class4)) AND ((@IsNull_Class5 = 1 AND [Class5] IS NULL) OR ([" &
                "Class5] = @Original_Class5)) AND ((@IsNull_OldClass1 = 1 AND [OldClass1] IS NULL" &
                ") OR ([OldClass1] = @Original_OldClass1)) AND ((@IsNull_OldClass2 = 1 AND [OldCl" &
                "ass2] IS NULL) OR ([OldClass2] = @Original_OldClass2)) AND ((@IsNull_OldClass3 =" &
                " 1 AND [OldClass3] IS NULL) OR ([OldClass3] = @Original_OldClass3)) AND ((@IsNul" &
                "l_OldClass4 = 1 AND [OldClass4] IS NULL) OR ([OldClass4] = @Original_OldClass4))" &
                " AND ((@IsNull_OldClass5 = 1 AND [OldClass5] IS NULL) OR ([OldClass5] = @Origina" &
                "l_OldClass5)) AND ((@IsNull_OverWday = 1 AND [OverWday] IS NULL) OR ([OverWday] " &
                "= @Original_OverWday)) AND ((@IsNull_OverWNight = 1 AND [OverWNight] IS NULL) OR" &
                " ([OverWNight] = @Original_OverWNight)) AND ((@IsNull_WorkOhr = 1 AND [WorkOhr] " &
                "IS NULL) OR ([WorkOhr] = @Original_WorkOhr)) AND ((@IsNull_IsOldEfficts = 1 AND " &
                "[IsOldEfficts] IS NULL) OR ([IsOldEfficts] = @Original_IsOldEfficts)) AND ((@IsN" &
                "ull_TopWoValue1 = 1 AND [TopWoValue1] IS NULL) OR ([TopWoValue1] = @Original_Top" &
                "WoValue1)) AND ((@IsNull_TopWoValue2 = 1 AND [TopWoValue2] IS NULL) OR ([TopWoVa" &
                "lue2] = @Original_TopWoValue2)) AND ((@IsNull_TopWoValue3 = 1 AND [TopWoValue3] " &
                "IS NULL) OR ([TopWoValue3] = @Original_TopWoValue3)) AND ((@IsNull_TopWoValue4 =" &
                " 1 AND [TopWoValue4] IS NULL) OR ([TopWoValue4] = @Original_TopWoValue4)) AND ((" &
                "@IsNull_TopWoValue5 = 1 AND [TopWoValue5] IS NULL) OR ([TopWoValue5] = @Original" &
                "_TopWoValue5)) AND ((@IsNull_Qhelp1 = 1 AND [Qhelp1] IS NULL) OR ([Qhelp1] = @Or" &
                "iginal_Qhelp1)) AND ((@IsNull_Qhelp2 = 1 AND [Qhelp2] IS NULL) OR ([Qhelp2] = @O" &
                "riginal_Qhelp2)) AND ((@IsNull_AvgMutable = 1 AND [AvgMutable] IS NULL) OR ([Avg" &
                "Mutable] = @Original_AvgMutable)) AND ((@IsNull_AllowancePerc = 1 AND [Allowance" &
                "Perc] IS NULL) OR ([AllowancePerc] = @Original_AllowancePerc)) AND ((@IsNull_All" &
                "owanceDays = 1 AND [AllowanceDays] IS NULL) OR ([AllowanceDays] = @Original_Allo" &
                "wanceDays)) AND ((@IsNull_DangerV = 1 AND [DangerV] IS NULL) OR ([DangerV] = @Or" &
                "iginal_DangerV)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SalaryConstID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SalaryConstID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Wife", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Wife", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Wife", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Wife", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Child1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Child1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Child1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Child1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Child2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Child2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Child2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Child2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Child3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Child3", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Child3", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Child3", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OtherChild", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OtherChild", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OtherChild", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OtherChild", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TSpecialize", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TSpecialize", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TSpecialize", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TSpecialize", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Specialize", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Specialize", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Specialize", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Specialize", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypeSpecialize", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeSpecialize", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypeSpecialize", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeSpecialize", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SocialInsurance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocialInsurance", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SocialInsurance", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocialInsurance", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CooperateBox", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CooperateBox", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CooperateBox", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CooperateBox", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CooperateBox1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CooperateBox1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CooperateBox1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CooperateBox1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CooperationWorkers", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CooperationWorkers", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CooperationWorkers", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CooperationWorkers", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EngCooperation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EngCooperation", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EngCooperation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EngCooperation", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_habitation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "habitation", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_habitation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "habitation", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AssistBox", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssistBox", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AssistBox", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssistBox", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Typo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Typo", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Typo", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Typo", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DeathAssist", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DeathAssist", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DeathAssist", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DeathAssist", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EndService", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndService", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EndService", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndService", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EngFarm", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EngFarm", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EngFarm", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EngFarm", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_stipendInsurance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stipendInsurance", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stipendInsurance", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stipendInsurance", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TaxImmunity", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TaxImmunity", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TaxImmunity", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TaxImmunity", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ControlID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ControlID", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ControlID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ControlID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CleanerCost", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CleanerCost", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CleanerCost", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CleanerCost", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WorkerTax", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WorkerTax", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WorkerTax", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WorkerTax", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ST1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ST1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ST2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ST2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ST3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST3", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ST3", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST3", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ST4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST4", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ST4", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST4", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ST5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST5", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ST5", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST5", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ST6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST6", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ST6", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST6", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ST7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST7", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ST7", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST7", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ST8", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST8", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ST8", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST8", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ST9", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST9", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ST9", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST9", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ST10", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST10", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ST10", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST10", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ST11", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST11", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ST11", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST11", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ST12", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST12", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ST12", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST12", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ST13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST13", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ST13", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST13", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_T1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_T1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_T2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_T2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_T3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T3", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_T3", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T3", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_T4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T4", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_T4", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T4", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_T5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T5", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_T5", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T5", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Manag", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Manag", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Manag", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Manag", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdelDeathAssist", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdelDeathAssist", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdelDeathAssist", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdelDeathAssist", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Class1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Class1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Class2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Class2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Class3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class3", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Class3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class3", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Class4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class4", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Class4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class4", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Class5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class5", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Class5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class5", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OldClass1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OldClass1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OldClass2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OldClass2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OldClass3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass3", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OldClass3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass3", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OldClass4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass4", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OldClass4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass4", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OldClass5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass5", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OldClass5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass5", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OverWday", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OverWday", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OverWday", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 2, "OverWday", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OverWNight", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OverWNight", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OverWNight", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 2, "OverWNight", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WorkOhr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WorkOhr", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WorkOhr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WorkOhr", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IsOldEfficts", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsOldEfficts", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsOldEfficts", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsOldEfficts", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TopWoValue1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TopWoValue1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TopWoValue2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TopWoValue2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TopWoValue3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue3", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TopWoValue3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue3", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TopWoValue4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue4", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TopWoValue4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue4", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TopWoValue5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue5", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TopWoValue5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue5", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Qhelp1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Qhelp1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Qhelp1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Qhelp1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Qhelp2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Qhelp2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Qhelp2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Qhelp2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AvgMutable", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AvgMutable", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AvgMutable", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AvgMutable", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AllowancePerc", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AllowancePerc", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AllowancePerc", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AllowancePerc", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AllowanceDays", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AllowanceDays", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AllowanceDays", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AllowanceDays", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DangerV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DangerV", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DangerV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DangerV", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [SalaryConstants] ([SalaryConstID], [Wife], [Child1], [Child2], [Chil" &
                "d3], [OtherChild], [TSpecialize], [Specialize], [TypeSpecialize], [SocialInsuran" &
                "ce], [CooperateBox], [CooperateBox1], [CooperationWorkers], [EngCooperation], [h" &
                "abitation], [AssistBox], [Typo], [DeathAssist], [EndService], [EngFarm], [stipen" &
                "dInsurance], [TaxImmunity], [ControlID], [CleanerCost], [WorkerTax], [ST1], [ST2" &
                "], [ST3], [ST4], [ST5], [ST6], [ST7], [ST8], [ST9], [ST10], [ST11], [ST12], [ST1" &
                "3], [T1], [T2], [T3], [T4], [T5], [Manag], [IdelDeathAssist], [Class1], [Class2]" &
                ", [Class3], [Class4], [Class5], [OldClass1], [OldClass2], [OldClass3], [OldClass" &
                "4], [OldClass5], [OverWday], [OverWNight], [WorkOhr], [IsOldEfficts], [TopWoValu" &
                "e1], [TopWoValue2], [TopWoValue3], [TopWoValue4], [TopWoValue5], [Qhelp1], [Qhel" &
                "p2], [AvgMutable], [AllowancePerc], [AllowanceDays], [DangerV]) VALUES (@SalaryC" &
                "onstID, @Wife, @Child1, @Child2, @Child3, @OtherChild, @TSpecialize, @Specialize" &
                ", @TypeSpecialize, @SocialInsurance, @CooperateBox, @CooperateBox1, @Cooperation" &
                "Workers, @EngCooperation, @habitation, @AssistBox, @Typo, @DeathAssist, @EndServ" &
                "ice, @EngFarm, @stipendInsurance, @TaxImmunity, @ControlID, @CleanerCost, @Worke" &
                "rTax, @ST1, @ST2, @ST3, @ST4, @ST5, @ST6, @ST7, @ST8, @ST9, @ST10, @ST11, @ST12," &
                " @ST13, @T1, @T2, @T3, @T4, @T5, @Manag, @IdelDeathAssist, @Class1, @Class2, @Cl" &
                "ass3, @Class4, @Class5, @OldClass1, @OldClass2, @OldClass3, @OldClass4, @OldClas" &
                "s5, @OverWday, @OverWNight, @WorkOhr, @IsOldEfficts, @TopWoValue1, @TopWoValue2," &
                " @TopWoValue3, @TopWoValue4, @TopWoValue5, @Qhelp1, @Qhelp2, @AvgMutable, @Allow" &
                "ancePerc, @AllowanceDays, @DangerV)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SalaryConstID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SalaryConstID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Wife", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Wife", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Child1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Child1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Child2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Child2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Child3", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Child3", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OtherChild", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OtherChild", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TSpecialize", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TSpecialize", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Specialize", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Specialize", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeSpecialize", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeSpecialize", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SocialInsurance", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocialInsurance", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CooperateBox", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CooperateBox", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CooperateBox1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CooperateBox1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CooperationWorkers", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CooperationWorkers", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EngCooperation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EngCooperation", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@habitation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "habitation", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AssistBox", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssistBox", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Typo", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Typo", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DeathAssist", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DeathAssist", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EndService", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndService", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EngFarm", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EngFarm", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stipendInsurance", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stipendInsurance", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TaxImmunity", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TaxImmunity", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ControlID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ControlID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CleanerCost", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CleanerCost", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WorkerTax", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WorkerTax", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ST1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ST2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ST3", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST3", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ST4", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST4", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ST5", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST5", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ST6", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST6", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ST7", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST7", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ST8", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST8", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ST9", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST9", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ST10", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST10", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ST11", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST11", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ST12", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST12", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ST13", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST13", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@T1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@T2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@T3", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T3", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@T4", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T4", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@T5", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T5", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Manag", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Manag", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdelDeathAssist", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdelDeathAssist", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Class1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Class2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Class3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class3", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Class4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class4", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Class5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class5", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OldClass1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OldClass2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OldClass3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass3", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OldClass4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass4", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OldClass5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass5", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OverWday", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 2, "OverWday", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OverWNight", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 2, "OverWNight", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WorkOhr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WorkOhr", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsOldEfficts", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsOldEfficts", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TopWoValue1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TopWoValue2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TopWoValue3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue3", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TopWoValue4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue4", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TopWoValue5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue5", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Qhelp1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Qhelp1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Qhelp2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Qhelp2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AvgMutable", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AvgMutable", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AllowancePerc", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AllowancePerc", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AllowanceDays", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AllowanceDays", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DangerV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DangerV", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [SalaryConstants] SET [SalaryConstID] = @SalaryConstID, [Wife] = @Wife, [C" &
                "hild1] = @Child1, [Child2] = @Child2, [Child3] = @Child3, [OtherChild] = @OtherC" &
                "hild, [TSpecialize] = @TSpecialize, [Specialize] = @Specialize, [TypeSpecialize]" &
                " = @TypeSpecialize, [SocialInsurance] = @SocialInsurance, [CooperateBox] = @Coop" &
                "erateBox, [CooperateBox1] = @CooperateBox1, [CooperationWorkers] = @CooperationW" &
                "orkers, [EngCooperation] = @EngCooperation, [habitation] = @habitation, [AssistB" &
                "ox] = @AssistBox, [Typo] = @Typo, [DeathAssist] = @DeathAssist, [EndService] = @" &
                "EndService, [EngFarm] = @EngFarm, [stipendInsurance] = @stipendInsurance, [TaxIm" &
                "munity] = @TaxImmunity, [ControlID] = @ControlID, [CleanerCost] = @CleanerCost, " &
                "[WorkerTax] = @WorkerTax, [ST1] = @ST1, [ST2] = @ST2, [ST3] = @ST3, [ST4] = @ST4" &
                ", [ST5] = @ST5, [ST6] = @ST6, [ST7] = @ST7, [ST8] = @ST8, [ST9] = @ST9, [ST10] =" &
                " @ST10, [ST11] = @ST11, [ST12] = @ST12, [ST13] = @ST13, [T1] = @T1, [T2] = @T2, " &
                "[T3] = @T3, [T4] = @T4, [T5] = @T5, [Manag] = @Manag, [IdelDeathAssist] = @IdelD" &
                "eathAssist, [Class1] = @Class1, [Class2] = @Class2, [Class3] = @Class3, [Class4]" &
                " = @Class4, [Class5] = @Class5, [OldClass1] = @OldClass1, [OldClass2] = @OldClas" &
                "s2, [OldClass3] = @OldClass3, [OldClass4] = @OldClass4, [OldClass5] = @OldClass5" &
                ", [OverWday] = @OverWday, [OverWNight] = @OverWNight, [WorkOhr] = @WorkOhr, [IsO" &
                "ldEfficts] = @IsOldEfficts, [TopWoValue1] = @TopWoValue1, [TopWoValue2] = @TopWo" &
                "Value2, [TopWoValue3] = @TopWoValue3, [TopWoValue4] = @TopWoValue4, [TopWoValue5" &
                "] = @TopWoValue5, [Qhelp1] = @Qhelp1, [Qhelp2] = @Qhelp2, [AvgMutable] = @AvgMut" &
                "able, [AllowancePerc] = @AllowancePerc, [AllowanceDays] = @AllowanceDays, [Dange" &
                "rV] = @DangerV WHERE (([SalaryConstID] = @Original_SalaryConstID) AND ((@IsNull_" &
                "Wife = 1 AND [Wife] IS NULL) OR ([Wife] = @Original_Wife)) AND ((@IsNull_Child1 " &
                "= 1 AND [Child1] IS NULL) OR ([Child1] = @Original_Child1)) AND ((@IsNull_Child2" &
                " = 1 AND [Child2] IS NULL) OR ([Child2] = @Original_Child2)) AND ((@IsNull_Child" &
                "3 = 1 AND [Child3] IS NULL) OR ([Child3] = @Original_Child3)) AND ((@IsNull_Othe" &
                "rChild = 1 AND [OtherChild] IS NULL) OR ([OtherChild] = @Original_OtherChild)) A" &
                "ND ((@IsNull_TSpecialize = 1 AND [TSpecialize] IS NULL) OR ([TSpecialize] = @Ori" &
                "ginal_TSpecialize)) AND ((@IsNull_Specialize = 1 AND [Specialize] IS NULL) OR ([" &
                "Specialize] = @Original_Specialize)) AND ((@IsNull_TypeSpecialize = 1 AND [TypeS" &
                "pecialize] IS NULL) OR ([TypeSpecialize] = @Original_TypeSpecialize)) AND ((@IsN" &
                "ull_SocialInsurance = 1 AND [SocialInsurance] IS NULL) OR ([SocialInsurance] = @" &
                "Original_SocialInsurance)) AND ((@IsNull_CooperateBox = 1 AND [CooperateBox] IS " &
                "NULL) OR ([CooperateBox] = @Original_CooperateBox)) AND ((@IsNull_CooperateBox1 " &
                "= 1 AND [CooperateBox1] IS NULL) OR ([CooperateBox1] = @Original_CooperateBox1))" &
                " AND ((@IsNull_CooperationWorkers = 1 AND [CooperationWorkers] IS NULL) OR ([Coo" &
                "perationWorkers] = @Original_CooperationWorkers)) AND ((@IsNull_EngCooperation =" &
                " 1 AND [EngCooperation] IS NULL) OR ([EngCooperation] = @Original_EngCooperation" &
                ")) AND ((@IsNull_habitation = 1 AND [habitation] IS NULL) OR ([habitation] = @Or" &
                "iginal_habitation)) AND ((@IsNull_AssistBox = 1 AND [AssistBox] IS NULL) OR ([As" &
                "sistBox] = @Original_AssistBox)) AND ((@IsNull_Typo = 1 AND [Typo] IS NULL) OR (" &
                "[Typo] = @Original_Typo)) AND ((@IsNull_DeathAssist = 1 AND [DeathAssist] IS NUL" &
                "L) OR ([DeathAssist] = @Original_DeathAssist)) AND ((@IsNull_EndService = 1 AND " &
                "[EndService] IS NULL) OR ([EndService] = @Original_EndService)) AND ((@IsNull_En" &
                "gFarm = 1 AND [EngFarm] IS NULL) OR ([EngFarm] = @Original_EngFarm)) AND ((@IsNu" &
                "ll_stipendInsurance = 1 AND [stipendInsurance] IS NULL) OR ([stipendInsurance] =" &
                " @Original_stipendInsurance)) AND ((@IsNull_TaxImmunity = 1 AND [TaxImmunity] IS" &
                " NULL) OR ([TaxImmunity] = @Original_TaxImmunity)) AND ((@IsNull_ControlID = 1 A" &
                "ND [ControlID] IS NULL) OR ([ControlID] = @Original_ControlID)) AND ((@IsNull_Cl" &
                "eanerCost = 1 AND [CleanerCost] IS NULL) OR ([CleanerCost] = @Original_CleanerCo" &
                "st)) AND ((@IsNull_WorkerTax = 1 AND [WorkerTax] IS NULL) OR ([WorkerTax] = @Ori" &
                "ginal_WorkerTax)) AND ((@IsNull_ST1 = 1 AND [ST1] IS NULL) OR ([ST1] = @Original" &
                "_ST1)) AND ((@IsNull_ST2 = 1 AND [ST2] IS NULL) OR ([ST2] = @Original_ST2)) AND " &
                "((@IsNull_ST3 = 1 AND [ST3] IS NULL) OR ([ST3] = @Original_ST3)) AND ((@IsNull_S" &
                "T4 = 1 AND [ST4] IS NULL) OR ([ST4] = @Original_ST4)) AND ((@IsNull_ST5 = 1 AND " &
                "[ST5] IS NULL) OR ([ST5] = @Original_ST5)) AND ((@IsNull_ST6 = 1 AND [ST6] IS NU" &
                "LL) OR ([ST6] = @Original_ST6)) AND ((@IsNull_ST7 = 1 AND [ST7] IS NULL) OR ([ST" &
                "7] = @Original_ST7)) AND ((@IsNull_ST8 = 1 AND [ST8] IS NULL) OR ([ST8] = @Origi" &
                "nal_ST8)) AND ((@IsNull_ST9 = 1 AND [ST9] IS NULL) OR ([ST9] = @Original_ST9)) A" &
                "ND ((@IsNull_ST10 = 1 AND [ST10] IS NULL) OR ([ST10] = @Original_ST10)) AND ((@I" &
                "sNull_ST11 = 1 AND [ST11] IS NULL) OR ([ST11] = @Original_ST11)) AND ((@IsNull_S" &
                "T12 = 1 AND [ST12] IS NULL) OR ([ST12] = @Original_ST12)) AND ((@IsNull_ST13 = 1" &
                " AND [ST13] IS NULL) OR ([ST13] = @Original_ST13)) AND ((@IsNull_T1 = 1 AND [T1]" &
                " IS NULL) OR ([T1] = @Original_T1)) AND ((@IsNull_T2 = 1 AND [T2] IS NULL) OR ([" &
                "T2] = @Original_T2)) AND ((@IsNull_T3 = 1 AND [T3] IS NULL) OR ([T3] = @Original" &
                "_T3)) AND ((@IsNull_T4 = 1 AND [T4] IS NULL) OR ([T4] = @Original_T4)) AND ((@Is" &
                "Null_T5 = 1 AND [T5] IS NULL) OR ([T5] = @Original_T5)) AND ((@IsNull_Manag = 1 " &
                "AND [Manag] IS NULL) OR ([Manag] = @Original_Manag)) AND ((@IsNull_IdelDeathAssi" &
                "st = 1 AND [IdelDeathAssist] IS NULL) OR ([IdelDeathAssist] = @Original_IdelDeat" &
                "hAssist)) AND ((@IsNull_Class1 = 1 AND [Class1] IS NULL) OR ([Class1] = @Origina" &
                "l_Class1)) AND ((@IsNull_Class2 = 1 AND [Class2] IS NULL) OR ([Class2] = @Origin" &
                "al_Class2)) AND ((@IsNull_Class3 = 1 AND [Class3] IS NULL) OR ([Class3] = @Origi" &
                "nal_Class3)) AND ((@IsNull_Class4 = 1 AND [Class4] IS NULL) OR ([Class4] = @Orig" &
                "inal_Class4)) AND ((@IsNull_Class5 = 1 AND [Class5] IS NULL) OR ([Class5] = @Ori" &
                "ginal_Class5)) AND ((@IsNull_OldClass1 = 1 AND [OldClass1] IS NULL) OR ([OldClas" &
                "s1] = @Original_OldClass1)) AND ((@IsNull_OldClass2 = 1 AND [OldClass2] IS NULL)" &
                " OR ([OldClass2] = @Original_OldClass2)) AND ((@IsNull_OldClass3 = 1 AND [OldCla" &
                "ss3] IS NULL) OR ([OldClass3] = @Original_OldClass3)) AND ((@IsNull_OldClass4 = " &
                "1 AND [OldClass4] IS NULL) OR ([OldClass4] = @Original_OldClass4)) AND ((@IsNull" &
                "_OldClass5 = 1 AND [OldClass5] IS NULL) OR ([OldClass5] = @Original_OldClass5)) " &
                "AND ((@IsNull_OverWday = 1 AND [OverWday] IS NULL) OR ([OverWday] = @Original_Ov" &
                "erWday)) AND ((@IsNull_OverWNight = 1 AND [OverWNight] IS NULL) OR ([OverWNight]" &
                " = @Original_OverWNight)) AND ((@IsNull_WorkOhr = 1 AND [WorkOhr] IS NULL) OR ([" &
                "WorkOhr] = @Original_WorkOhr)) AND ((@IsNull_IsOldEfficts = 1 AND [IsOldEfficts]" &
                " IS NULL) OR ([IsOldEfficts] = @Original_IsOldEfficts)) AND ((@IsNull_TopWoValue" &
                "1 = 1 AND [TopWoValue1] IS NULL) OR ([TopWoValue1] = @Original_TopWoValue1)) AND" &
                " ((@IsNull_TopWoValue2 = 1 AND [TopWoValue2] IS NULL) OR ([TopWoValue2] = @Origi" &
                "nal_TopWoValue2)) AND ((@IsNull_TopWoValue3 = 1 AND [TopWoValue3] IS NULL) OR ([" &
                "TopWoValue3] = @Original_TopWoValue3)) AND ((@IsNull_TopWoValue4 = 1 AND [TopWoV" &
                "alue4] IS NULL) OR ([TopWoValue4] = @Original_TopWoValue4)) AND ((@IsNull_TopWoV" &
                "alue5 = 1 AND [TopWoValue5] IS NULL) OR ([TopWoValue5] = @Original_TopWoValue5))" &
                " AND ((@IsNull_Qhelp1 = 1 AND [Qhelp1] IS NULL) OR ([Qhelp1] = @Original_Qhelp1)" &
                ") AND ((@IsNull_Qhelp2 = 1 AND [Qhelp2] IS NULL) OR ([Qhelp2] = @Original_Qhelp2" &
                ")) AND ((@IsNull_AvgMutable = 1 AND [AvgMutable] IS NULL) OR ([AvgMutable] = @Or" &
                "iginal_AvgMutable)) AND ((@IsNull_AllowancePerc = 1 AND [AllowancePerc] IS NULL)" &
                " OR ([AllowancePerc] = @Original_AllowancePerc)) AND ((@IsNull_AllowanceDays = 1" &
                " AND [AllowanceDays] IS NULL) OR ([AllowanceDays] = @Original_AllowanceDays)) AN" &
                "D ((@IsNull_DangerV = 1 AND [DangerV] IS NULL) OR ([DangerV] = @Original_DangerV" &
                ")))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SalaryConstID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SalaryConstID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Wife", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Wife", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Child1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Child1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Child2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Child2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Child3", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Child3", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OtherChild", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OtherChild", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TSpecialize", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TSpecialize", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Specialize", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Specialize", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeSpecialize", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeSpecialize", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SocialInsurance", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocialInsurance", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CooperateBox", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CooperateBox", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CooperateBox1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CooperateBox1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CooperationWorkers", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CooperationWorkers", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EngCooperation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EngCooperation", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@habitation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "habitation", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AssistBox", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssistBox", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Typo", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Typo", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DeathAssist", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DeathAssist", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EndService", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndService", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EngFarm", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EngFarm", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@stipendInsurance", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stipendInsurance", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TaxImmunity", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TaxImmunity", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ControlID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ControlID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CleanerCost", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CleanerCost", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WorkerTax", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WorkerTax", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ST1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ST2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ST3", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST3", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ST4", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST4", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ST5", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST5", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ST6", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST6", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ST7", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST7", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ST8", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST8", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ST9", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST9", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ST10", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST10", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ST11", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST11", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ST12", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST12", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ST13", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST13", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@T1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@T2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@T3", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T3", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@T4", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T4", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@T5", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T5", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Manag", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Manag", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IdelDeathAssist", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdelDeathAssist", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Class1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Class2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Class3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class3", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Class4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class4", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Class5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class5", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OldClass1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OldClass2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OldClass3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass3", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OldClass4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass4", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OldClass5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass5", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OverWday", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 2, "OverWday", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OverWNight", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 2, "OverWNight", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WorkOhr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WorkOhr", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsOldEfficts", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsOldEfficts", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TopWoValue1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TopWoValue2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TopWoValue3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue3", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TopWoValue4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue4", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TopWoValue5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue5", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Qhelp1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Qhelp1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Qhelp2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Qhelp2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AvgMutable", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AvgMutable", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AllowancePerc", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AllowancePerc", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AllowanceDays", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AllowanceDays", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DangerV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DangerV", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SalaryConstID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SalaryConstID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Wife", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Wife", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Wife", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Wife", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Child1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Child1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Child1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Child1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Child2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Child2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Child2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Child2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Child3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Child3", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Child3", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Child3", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OtherChild", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OtherChild", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OtherChild", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OtherChild", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TSpecialize", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TSpecialize", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TSpecialize", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TSpecialize", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Specialize", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Specialize", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Specialize", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Specialize", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TypeSpecialize", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeSpecialize", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TypeSpecialize", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeSpecialize", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SocialInsurance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocialInsurance", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SocialInsurance", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocialInsurance", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CooperateBox", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CooperateBox", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CooperateBox", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CooperateBox", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CooperateBox1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CooperateBox1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CooperateBox1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CooperateBox1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CooperationWorkers", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CooperationWorkers", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CooperationWorkers", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CooperationWorkers", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EngCooperation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EngCooperation", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EngCooperation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EngCooperation", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_habitation", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "habitation", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_habitation", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "habitation", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AssistBox", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssistBox", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AssistBox", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssistBox", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Typo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Typo", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Typo", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Typo", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DeathAssist", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DeathAssist", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DeathAssist", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DeathAssist", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EndService", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndService", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EndService", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndService", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EngFarm", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EngFarm", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EngFarm", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EngFarm", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_stipendInsurance", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stipendInsurance", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_stipendInsurance", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "stipendInsurance", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TaxImmunity", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TaxImmunity", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TaxImmunity", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TaxImmunity", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ControlID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ControlID", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ControlID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ControlID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CleanerCost", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CleanerCost", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CleanerCost", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CleanerCost", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WorkerTax", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WorkerTax", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WorkerTax", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WorkerTax", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ST1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ST1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ST2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ST2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ST3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST3", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ST3", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST3", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ST4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST4", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ST4", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST4", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ST5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST5", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ST5", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST5", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ST6", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST6", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ST6", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST6", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ST7", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST7", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ST7", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST7", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ST8", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST8", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ST8", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST8", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ST9", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST9", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ST9", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST9", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ST10", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST10", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ST10", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST10", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ST11", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST11", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ST11", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST11", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ST12", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST12", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ST12", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST12", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ST13", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST13", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ST13", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ST13", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_T1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_T1", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_T2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_T2", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_T3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T3", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_T3", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T3", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_T4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T4", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_T4", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T4", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_T5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T5", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_T5", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "T5", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Manag", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Manag", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Manag", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Manag", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IdelDeathAssist", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdelDeathAssist", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IdelDeathAssist", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IdelDeathAssist", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Class1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Class1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Class2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Class2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Class3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class3", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Class3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class3", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Class4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class4", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Class4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class4", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Class5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class5", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Class5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Class5", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OldClass1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OldClass1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OldClass2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OldClass2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OldClass3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass3", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OldClass3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass3", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OldClass4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass4", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OldClass4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass4", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OldClass5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass5", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OldClass5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OldClass5", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OverWday", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OverWday", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OverWday", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 2, "OverWday", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OverWNight", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OverWNight", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OverWNight", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 2, "OverWNight", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_WorkOhr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WorkOhr", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_WorkOhr", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WorkOhr", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_IsOldEfficts", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsOldEfficts", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_IsOldEfficts", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsOldEfficts", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TopWoValue1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TopWoValue1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TopWoValue2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TopWoValue2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TopWoValue3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue3", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TopWoValue3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue3", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TopWoValue4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue4", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TopWoValue4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue4", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TopWoValue5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue5", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TopWoValue5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TopWoValue5", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Qhelp1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Qhelp1", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Qhelp1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Qhelp1", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Qhelp2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Qhelp2", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Qhelp2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Qhelp2", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AvgMutable", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AvgMutable", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AvgMutable", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AvgMutable", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AllowancePerc", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AllowancePerc", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AllowancePerc", Global.System.Data.SqlDbType.Float, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AllowancePerc", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AllowanceDays", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AllowanceDays", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AllowanceDays", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AllowanceDays", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DangerV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DangerV", Global.System.Data.DataRowVersion.Original, True, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DangerV", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DangerV", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.BaniasEnergy.My.MySettings.Default.BaniasEnergyDBConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        SalaryConstID, Wife, Child1, Child2, Child3, OtherChild, TSpecializ" &
                "e, Specialize, TypeSpecialize, SocialInsurance, CooperateBox, CooperateBox1, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & " " &
                "                        CooperationWorkers, EngCooperation, habitation, AssistBo" &
                "x, Typo, DeathAssist, EndService, EngFarm, stipendInsurance, TaxImmunity, Contro" &
                "lID, CleanerCost, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         WorkerTax, ST1, ST2, ST3, ST4, ST5," &
                " ST6, ST7, ST8, ST9, ST10, ST11, ST12, ST13, T1, T2, T3, T4, T5, Manag, IdelDeat" &
                "hAssist, Class1, Class2, Class3, Class4, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                         Class5, OldC" &
                "lass1, OldClass2, OldClass3, OldClass4, OldClass5, OverWday, OverWNight, WorkOhr" &
                ", IsOldEfficts, TopWoValue1, TopWoValue2, TopWoValue3, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "                       " &
                "  TopWoValue4, TopWoValue5, Qhelp1, Qhelp2, AvgMutable, AllowancePerc, Allowance" &
                "Days, DangerV" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            SalaryConstants"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)>
        Public Overridable Overloads Function Fill(ByVal dataTable As SetupSalaryDataSet.SalaryConstantsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)>
        Public Overridable Overloads Function GetData() As SetupSalaryDataSet.SalaryConstantsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As SetupSalaryDataSet.SalaryConstantsDataTable = New SetupSalaryDataSet.SalaryConstantsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Overloads Function Update(ByVal dataTable As SetupSalaryDataSet.SalaryConstantsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Overloads Function Update(ByVal dataSet As SetupSalaryDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "SalaryConstants")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)>
        Public Overridable Overloads Function Delete(
                    ByVal Original_SalaryConstID As Integer,
                    ByVal Original_Wife As Global.System.Nullable(Of Double),
                    ByVal Original_Child1 As Global.System.Nullable(Of Double),
                    ByVal Original_Child2 As Global.System.Nullable(Of Double),
                    ByVal Original_Child3 As Global.System.Nullable(Of Double),
                    ByVal Original_OtherChild As Global.System.Nullable(Of Double),
                    ByVal Original_TSpecialize As Global.System.Nullable(Of Double),
                    ByVal Original_Specialize As Global.System.Nullable(Of Double),
                    ByVal Original_TypeSpecialize As Global.System.Nullable(Of Double),
                    ByVal Original_SocialInsurance As Global.System.Nullable(Of Double),
                    ByVal Original_CooperateBox As Global.System.Nullable(Of Double),
                    ByVal Original_CooperateBox1 As Global.System.Nullable(Of Double),
                    ByVal Original_CooperationWorkers As Global.System.Nullable(Of Double),
                    ByVal Original_EngCooperation As Global.System.Nullable(Of Double),
                    ByVal Original_habitation As Global.System.Nullable(Of Double),
                    ByVal Original_AssistBox As Global.System.Nullable(Of Double),
                    ByVal Original_Typo As Global.System.Nullable(Of Double),
                    ByVal Original_DeathAssist As Global.System.Nullable(Of Double),
                    ByVal Original_EndService As Global.System.Nullable(Of Double),
                    ByVal Original_EngFarm As Global.System.Nullable(Of Double),
                    ByVal Original_stipendInsurance As Global.System.Nullable(Of Double),
                    ByVal Original_TaxImmunity As Global.System.Nullable(Of Double),
                    ByVal Original_ControlID As Global.System.Nullable(Of Integer),
                    ByVal Original_CleanerCost As Global.System.Nullable(Of Integer),
                    ByVal Original_WorkerTax As String,
                    ByVal Original_ST1 As Global.System.Nullable(Of Double),
                    ByVal Original_ST2 As Global.System.Nullable(Of Double),
                    ByVal Original_ST3 As Global.System.Nullable(Of Double),
                    ByVal Original_ST4 As Global.System.Nullable(Of Double),
                    ByVal Original_ST5 As Global.System.Nullable(Of Double),
                    ByVal Original_ST6 As Global.System.Nullable(Of Double),
                    ByVal Original_ST7 As Global.System.Nullable(Of Double),
                    ByVal Original_ST8 As Global.System.Nullable(Of Double),
                    ByVal Original_ST9 As Global.System.Nullable(Of Double),
                    ByVal Original_ST10 As Global.System.Nullable(Of Double),
                    ByVal Original_ST11 As Global.System.Nullable(Of Double),
                    ByVal Original_ST12 As Global.System.Nullable(Of Double),
                    ByVal Original_ST13 As Global.System.Nullable(Of Double),
                    ByVal Original_T1 As Global.System.Nullable(Of Double),
                    ByVal Original_T2 As Global.System.Nullable(Of Double),
                    ByVal Original_T3 As Global.System.Nullable(Of Double),
                    ByVal Original_T4 As Global.System.Nullable(Of Double),
                    ByVal Original_T5 As Global.System.Nullable(Of Double),
                    ByVal Original_Manag As Global.System.Nullable(Of Integer),
                    ByVal Original_IdelDeathAssist As Global.System.Nullable(Of Boolean),
                    ByVal Original_Class1 As Global.System.Nullable(Of Integer),
                    ByVal Original_Class2 As Global.System.Nullable(Of Integer),
                    ByVal Original_Class3 As Global.System.Nullable(Of Integer),
                    ByVal Original_Class4 As Global.System.Nullable(Of Integer),
                    ByVal Original_Class5 As Global.System.Nullable(Of Integer),
                    ByVal Original_OldClass1 As Global.System.Nullable(Of Integer),
                    ByVal Original_OldClass2 As Global.System.Nullable(Of Integer),
                    ByVal Original_OldClass3 As Global.System.Nullable(Of Integer),
                    ByVal Original_OldClass4 As Global.System.Nullable(Of Integer),
                    ByVal Original_OldClass5 As Global.System.Nullable(Of Integer),
                    ByVal Original_OverWday As Global.System.Nullable(Of Decimal),
                    ByVal Original_OverWNight As Global.System.Nullable(Of Decimal),
                    ByVal Original_WorkOhr As Global.System.Nullable(Of Integer),
                    ByVal Original_IsOldEfficts As Global.System.Nullable(Of Boolean),
                    ByVal Original_TopWoValue1 As Global.System.Nullable(Of Integer),
                    ByVal Original_TopWoValue2 As Global.System.Nullable(Of Integer),
                    ByVal Original_TopWoValue3 As Global.System.Nullable(Of Integer),
                    ByVal Original_TopWoValue4 As Global.System.Nullable(Of Integer),
                    ByVal Original_TopWoValue5 As Global.System.Nullable(Of Integer),
                    ByVal Original_Qhelp1 As Global.System.Nullable(Of Integer),
                    ByVal Original_Qhelp2 As Global.System.Nullable(Of Integer),
                    ByVal Original_AvgMutable As Global.System.Nullable(Of Integer),
                    ByVal Original_AllowancePerc As Global.System.Nullable(Of Double),
                    ByVal Original_AllowanceDays As Global.System.Nullable(Of Integer),
                    ByVal Original_DangerV As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SalaryConstID, Integer)
            If (Original_Wife.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Wife.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_Child1.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Child1.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_Child2.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Child2.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_Child3.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Child3.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_OtherChild.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_OtherChild.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_TSpecialize.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_TSpecialize.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_Specialize.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Specialize.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_TypeSpecialize.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_TypeSpecialize.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_SocialInsurance.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_SocialInsurance.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_CooperateBox.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_CooperateBox.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_CooperateBox1.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_CooperateBox1.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_CooperationWorkers.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_CooperationWorkers.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_EngCooperation.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_EngCooperation.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_habitation.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_habitation.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_AssistBox.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_AssistBox.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_Typo.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_Typo.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_DeathAssist.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_DeathAssist.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_EndService.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_EndService.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_EngFarm.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_EngFarm.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_stipendInsurance.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_stipendInsurance.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_TaxImmunity.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_TaxImmunity.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_ControlID.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_ControlID.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_CleanerCost.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_CleanerCost.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Original_WorkerTax Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original_WorkerTax, String)
            End If
            If (Original_ST1.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(Original_ST1.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (Original_ST2.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(Original_ST2.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (Original_ST3.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(Original_ST3.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (Original_ST4.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(Original_ST4.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (Original_ST5.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(Original_ST5.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (Original_ST6.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(Original_ST6.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (Original_ST7.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(Original_ST7.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (Original_ST8.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(Original_ST8.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (Original_ST9.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(Original_ST9.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(66).Value = Global.System.DBNull.Value
            End If
            If (Original_ST10.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(Original_ST10.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (Original_ST11.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(Original_ST11.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(70).Value = Global.System.DBNull.Value
            End If
            If (Original_ST12.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(72).Value = CType(Original_ST12.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(72).Value = Global.System.DBNull.Value
            End If
            If (Original_ST13.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = CType(Original_ST13.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = Global.System.DBNull.Value
            End If
            If (Original_T1.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = CType(Original_T1.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = Global.System.DBNull.Value
            End If
            If (Original_T2.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(77).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(78).Value = CType(Original_T2.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(77).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(78).Value = Global.System.DBNull.Value
            End If
            If (Original_T3.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(79).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(80).Value = CType(Original_T3.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(79).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(80).Value = Global.System.DBNull.Value
            End If
            If (Original_T4.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(81).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(82).Value = CType(Original_T4.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(81).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(82).Value = Global.System.DBNull.Value
            End If
            If (Original_T5.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(83).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(84).Value = CType(Original_T5.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(83).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(84).Value = Global.System.DBNull.Value
            End If
            If (Original_Manag.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(85).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(86).Value = CType(Original_Manag.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(85).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(86).Value = Global.System.DBNull.Value
            End If
            If (Original_IdelDeathAssist.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(87).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(88).Value = CType(Original_IdelDeathAssist.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(87).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(88).Value = Global.System.DBNull.Value
            End If
            If (Original_Class1.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(89).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(90).Value = CType(Original_Class1.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(89).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(90).Value = Global.System.DBNull.Value
            End If
            If (Original_Class2.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(91).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(92).Value = CType(Original_Class2.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(91).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(92).Value = Global.System.DBNull.Value
            End If
            If (Original_Class3.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(93).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(94).Value = CType(Original_Class3.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(93).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(94).Value = Global.System.DBNull.Value
            End If
            If (Original_Class4.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(95).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(96).Value = CType(Original_Class4.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(95).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(96).Value = Global.System.DBNull.Value
            End If
            If (Original_Class5.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(97).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(98).Value = CType(Original_Class5.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(97).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(98).Value = Global.System.DBNull.Value
            End If
            If (Original_OldClass1.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(99).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(100).Value = CType(Original_OldClass1.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(99).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(100).Value = Global.System.DBNull.Value
            End If
            If (Original_OldClass2.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(101).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(102).Value = CType(Original_OldClass2.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(101).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(102).Value = Global.System.DBNull.Value
            End If
            If (Original_OldClass3.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(103).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(104).Value = CType(Original_OldClass3.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(103).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(104).Value = Global.System.DBNull.Value
            End If
            If (Original_OldClass4.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(105).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(106).Value = CType(Original_OldClass4.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(105).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(106).Value = Global.System.DBNull.Value
            End If
            If (Original_OldClass5.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(107).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(108).Value = CType(Original_OldClass5.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(107).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(108).Value = Global.System.DBNull.Value
            End If
            If (Original_OverWday.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(109).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(110).Value = CType(Original_OverWday.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(109).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(110).Value = Global.System.DBNull.Value
            End If
            If (Original_OverWNight.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(111).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(112).Value = CType(Original_OverWNight.Value, Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(111).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(112).Value = Global.System.DBNull.Value
            End If
            If (Original_WorkOhr.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(113).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(114).Value = CType(Original_WorkOhr.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(113).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(114).Value = Global.System.DBNull.Value
            End If
            If (Original_IsOldEfficts.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(115).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(116).Value = CType(Original_IsOldEfficts.Value, Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(115).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(116).Value = Global.System.DBNull.Value
            End If
            If (Original_TopWoValue1.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(117).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(118).Value = CType(Original_TopWoValue1.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(117).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(118).Value = Global.System.DBNull.Value
            End If
            If (Original_TopWoValue2.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(119).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(120).Value = CType(Original_TopWoValue2.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(119).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(120).Value = Global.System.DBNull.Value
            End If
            If (Original_TopWoValue3.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(121).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(122).Value = CType(Original_TopWoValue3.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(121).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(122).Value = Global.System.DBNull.Value
            End If
            If (Original_TopWoValue4.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(123).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(124).Value = CType(Original_TopWoValue4.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(123).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(124).Value = Global.System.DBNull.Value
            End If
            If (Original_TopWoValue5.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(125).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(126).Value = CType(Original_TopWoValue5.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(125).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(126).Value = Global.System.DBNull.Value
            End If
            If (Original_Qhelp1.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(127).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(128).Value = CType(Original_Qhelp1.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(127).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(128).Value = Global.System.DBNull.Value
            End If
            If (Original_Qhelp2.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(129).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(130).Value = CType(Original_Qhelp2.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(129).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(130).Value = Global.System.DBNull.Value
            End If
            If (Original_AvgMutable.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(131).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(132).Value = CType(Original_AvgMutable.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(131).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(132).Value = Global.System.DBNull.Value
            End If
            If (Original_AllowancePerc.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(133).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(134).Value = CType(Original_AllowancePerc.Value, Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(133).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(134).Value = Global.System.DBNull.Value
            End If
            If (Original_AllowanceDays.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(135).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(136).Value = CType(Original_AllowanceDays.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(135).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(136).Value = Global.System.DBNull.Value
            End If
            If (Original_DangerV.HasValue = True) Then
                Me.Adapter.DeleteCommand.Parameters(137).Value = CType(0, Object)
                Me.Adapter.DeleteCommand.Parameters(138).Value = CType(Original_DangerV.Value, Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(137).Value = CType(1, Object)
                Me.Adapter.DeleteCommand.Parameters(138).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)>
        Public Overridable Overloads Function Insert(
                    ByVal SalaryConstID As Integer,
                    ByVal Wife As Global.System.Nullable(Of Double),
                    ByVal Child1 As Global.System.Nullable(Of Double),
                    ByVal Child2 As Global.System.Nullable(Of Double),
                    ByVal Child3 As Global.System.Nullable(Of Double),
                    ByVal OtherChild As Global.System.Nullable(Of Double),
                    ByVal TSpecialize As Global.System.Nullable(Of Double),
                    ByVal Specialize As Global.System.Nullable(Of Double),
                    ByVal TypeSpecialize As Global.System.Nullable(Of Double),
                    ByVal SocialInsurance As Global.System.Nullable(Of Double),
                    ByVal CooperateBox As Global.System.Nullable(Of Double),
                    ByVal CooperateBox1 As Global.System.Nullable(Of Double),
                    ByVal CooperationWorkers As Global.System.Nullable(Of Double),
                    ByVal EngCooperation As Global.System.Nullable(Of Double),
                    ByVal habitation As Global.System.Nullable(Of Double),
                    ByVal AssistBox As Global.System.Nullable(Of Double),
                    ByVal Typo As Global.System.Nullable(Of Double),
                    ByVal DeathAssist As Global.System.Nullable(Of Double),
                    ByVal EndService As Global.System.Nullable(Of Double),
                    ByVal EngFarm As Global.System.Nullable(Of Double),
                    ByVal stipendInsurance As Global.System.Nullable(Of Double),
                    ByVal TaxImmunity As Global.System.Nullable(Of Double),
                    ByVal ControlID As Global.System.Nullable(Of Integer),
                    ByVal CleanerCost As Global.System.Nullable(Of Integer),
                    ByVal WorkerTax As String,
                    ByVal ST1 As Global.System.Nullable(Of Double),
                    ByVal ST2 As Global.System.Nullable(Of Double),
                    ByVal ST3 As Global.System.Nullable(Of Double),
                    ByVal ST4 As Global.System.Nullable(Of Double),
                    ByVal ST5 As Global.System.Nullable(Of Double),
                    ByVal ST6 As Global.System.Nullable(Of Double),
                    ByVal ST7 As Global.System.Nullable(Of Double),
                    ByVal ST8 As Global.System.Nullable(Of Double),
                    ByVal ST9 As Global.System.Nullable(Of Double),
                    ByVal ST10 As Global.System.Nullable(Of Double),
                    ByVal ST11 As Global.System.Nullable(Of Double),
                    ByVal ST12 As Global.System.Nullable(Of Double),
                    ByVal ST13 As Global.System.Nullable(Of Double),
                    ByVal T1 As Global.System.Nullable(Of Double),
                    ByVal T2 As Global.System.Nullable(Of Double),
                    ByVal T3 As Global.System.Nullable(Of Double),
                    ByVal T4 As Global.System.Nullable(Of Double),
                    ByVal T5 As Global.System.Nullable(Of Double),
                    ByVal Manag As Global.System.Nullable(Of Integer),
                    ByVal IdelDeathAssist As Global.System.Nullable(Of Boolean),
                    ByVal Class1 As Global.System.Nullable(Of Integer),
                    ByVal Class2 As Global.System.Nullable(Of Integer),
                    ByVal Class3 As Global.System.Nullable(Of Integer),
                    ByVal Class4 As Global.System.Nullable(Of Integer),
                    ByVal Class5 As Global.System.Nullable(Of Integer),
                    ByVal OldClass1 As Global.System.Nullable(Of Integer),
                    ByVal OldClass2 As Global.System.Nullable(Of Integer),
                    ByVal OldClass3 As Global.System.Nullable(Of Integer),
                    ByVal OldClass4 As Global.System.Nullable(Of Integer),
                    ByVal OldClass5 As Global.System.Nullable(Of Integer),
                    ByVal OverWday As Global.System.Nullable(Of Decimal),
                    ByVal OverWNight As Global.System.Nullable(Of Decimal),
                    ByVal WorkOhr As Global.System.Nullable(Of Integer),
                    ByVal IsOldEfficts As Global.System.Nullable(Of Boolean),
                    ByVal TopWoValue1 As Global.System.Nullable(Of Integer),
                    ByVal TopWoValue2 As Global.System.Nullable(Of Integer),
                    ByVal TopWoValue3 As Global.System.Nullable(Of Integer),
                    ByVal TopWoValue4 As Global.System.Nullable(Of Integer),
                    ByVal TopWoValue5 As Global.System.Nullable(Of Integer),
                    ByVal Qhelp1 As Global.System.Nullable(Of Integer),
                    ByVal Qhelp2 As Global.System.Nullable(Of Integer),
                    ByVal AvgMutable As Global.System.Nullable(Of Integer),
                    ByVal AllowancePerc As Global.System.Nullable(Of Double),
                    ByVal AllowanceDays As Global.System.Nullable(Of Integer),
                    ByVal DangerV As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(SalaryConstID, Integer)
            If (Wife.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Wife.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Child1.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Child1.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Child2.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Child2.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Child3.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Child3.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (OtherChild.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(OtherChild.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (TSpecialize.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(TSpecialize.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Specialize.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Specialize.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (TypeSpecialize.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(TypeSpecialize.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (SocialInsurance.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(SocialInsurance.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (CooperateBox.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(CooperateBox.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (CooperateBox1.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(CooperateBox1.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (CooperationWorkers.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(CooperationWorkers.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (EngCooperation.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(EngCooperation.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (habitation.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(habitation.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (AssistBox.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(AssistBox.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Typo.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Typo.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (DeathAssist.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(DeathAssist.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (EndService.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(EndService.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (EngFarm.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(EngFarm.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (stipendInsurance.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(stipendInsurance.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (TaxImmunity.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(TaxImmunity.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (ControlID.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(ControlID.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (CleanerCost.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(CleanerCost.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (WorkerTax Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(WorkerTax, String)
            End If
            If (ST1.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(ST1.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (ST2.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(ST2.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (ST3.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(ST3.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (ST4.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(ST4.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (ST5.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(ST5.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (ST6.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(ST6.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (ST7.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(ST7.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (ST8.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(ST8.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (ST9.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(ST9.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (ST10.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(ST10.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (ST11.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(ST11.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (ST12.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(ST12.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (ST13.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(ST13.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (T1.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(T1.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (T2.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(T2.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (T3.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(T3.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (T4.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(T4.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (T5.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(T5.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Manag.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(Manag.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (IdelDeathAssist.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(IdelDeathAssist.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Class1.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(Class1.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Class2.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(Class2.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Class3.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(Class3.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Class4.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(Class4.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (Class5.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(Class5.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (OldClass1.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(OldClass1.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (OldClass2.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(OldClass2.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (OldClass3.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(OldClass3.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (OldClass4.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(OldClass4.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (OldClass5.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(OldClass5.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (OverWday.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(OverWday.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (OverWNight.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(OverWNight.Value, Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (WorkOhr.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(57).Value = CType(WorkOhr.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (IsOldEfficts.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(IsOldEfficts.Value, Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (TopWoValue1.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(59).Value = CType(TopWoValue1.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (TopWoValue2.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(TopWoValue2.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (TopWoValue3.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(61).Value = CType(TopWoValue3.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (TopWoValue4.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(62).Value = CType(TopWoValue4.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (TopWoValue5.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(63).Value = CType(TopWoValue5.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (Qhelp1.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(64).Value = CType(Qhelp1.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (Qhelp2.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(65).Value = CType(Qhelp2.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (AvgMutable.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(66).Value = CType(AvgMutable.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(66).Value = Global.System.DBNull.Value
            End If
            If (AllowancePerc.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(67).Value = CType(AllowancePerc.Value, Double)
            Else
                Me.Adapter.InsertCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (AllowanceDays.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(68).Value = CType(AllowanceDays.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (DangerV.HasValue = True) Then
                Me.Adapter.InsertCommand.Parameters(69).Value = CType(DangerV.Value, Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
        Public Overridable Overloads Function Update(
                    ByVal SalaryConstID As Integer,
                    ByVal Wife As Global.System.Nullable(Of Double),
                    ByVal Child1 As Global.System.Nullable(Of Double),
                    ByVal Child2 As Global.System.Nullable(Of Double),
                    ByVal Child3 As Global.System.Nullable(Of Double),
                    ByVal OtherChild As Global.System.Nullable(Of Double),
                    ByVal TSpecialize As Global.System.Nullable(Of Double),
                    ByVal Specialize As Global.System.Nullable(Of Double),
                    ByVal TypeSpecialize As Global.System.Nullable(Of Double),
                    ByVal SocialInsurance As Global.System.Nullable(Of Double),
                    ByVal CooperateBox As Global.System.Nullable(Of Double),
                    ByVal CooperateBox1 As Global.System.Nullable(Of Double),
                    ByVal CooperationWorkers As Global.System.Nullable(Of Double),
                    ByVal EngCooperation As Global.System.Nullable(Of Double),
                    ByVal habitation As Global.System.Nullable(Of Double),
                    ByVal AssistBox As Global.System.Nullable(Of Double),
                    ByVal Typo As Global.System.Nullable(Of Double),
                    ByVal DeathAssist As Global.System.Nullable(Of Double),
                    ByVal EndService As Global.System.Nullable(Of Double),
                    ByVal EngFarm As Global.System.Nullable(Of Double),
                    ByVal stipendInsurance As Global.System.Nullable(Of Double),
                    ByVal TaxImmunity As Global.System.Nullable(Of Double),
                    ByVal ControlID As Global.System.Nullable(Of Integer),
                    ByVal CleanerCost As Global.System.Nullable(Of Integer),
                    ByVal WorkerTax As String,
                    ByVal ST1 As Global.System.Nullable(Of Double),
                    ByVal ST2 As Global.System.Nullable(Of Double),
                    ByVal ST3 As Global.System.Nullable(Of Double),
                    ByVal ST4 As Global.System.Nullable(Of Double),
                    ByVal ST5 As Global.System.Nullable(Of Double),
                    ByVal ST6 As Global.System.Nullable(Of Double),
                    ByVal ST7 As Global.System.Nullable(Of Double),
                    ByVal ST8 As Global.System.Nullable(Of Double),
                    ByVal ST9 As Global.System.Nullable(Of Double),
                    ByVal ST10 As Global.System.Nullable(Of Double),
                    ByVal ST11 As Global.System.Nullable(Of Double),
                    ByVal ST12 As Global.System.Nullable(Of Double),
                    ByVal ST13 As Global.System.Nullable(Of Double),
                    ByVal T1 As Global.System.Nullable(Of Double),
                    ByVal T2 As Global.System.Nullable(Of Double),
                    ByVal T3 As Global.System.Nullable(Of Double),
                    ByVal T4 As Global.System.Nullable(Of Double),
                    ByVal T5 As Global.System.Nullable(Of Double),
                    ByVal Manag As Global.System.Nullable(Of Integer),
                    ByVal IdelDeathAssist As Global.System.Nullable(Of Boolean),
                    ByVal Class1 As Global.System.Nullable(Of Integer),
                    ByVal Class2 As Global.System.Nullable(Of Integer),
                    ByVal Class3 As Global.System.Nullable(Of Integer),
                    ByVal Class4 As Global.System.Nullable(Of Integer),
                    ByVal Class5 As Global.System.Nullable(Of Integer),
                    ByVal OldClass1 As Global.System.Nullable(Of Integer),
                    ByVal OldClass2 As Global.System.Nullable(Of Integer),
                    ByVal OldClass3 As Global.System.Nullable(Of Integer),
                    ByVal OldClass4 As Global.System.Nullable(Of Integer),
                    ByVal OldClass5 As Global.System.Nullable(Of Integer),
                    ByVal OverWday As Global.System.Nullable(Of Decimal),
                    ByVal OverWNight As Global.System.Nullable(Of Decimal),
                    ByVal WorkOhr As Global.System.Nullable(Of Integer),
                    ByVal IsOldEfficts As Global.System.Nullable(Of Boolean),
                    ByVal TopWoValue1 As Global.System.Nullable(Of Integer),
                    ByVal TopWoValue2 As Global.System.Nullable(Of Integer),
                    ByVal TopWoValue3 As Global.System.Nullable(Of Integer),
                    ByVal TopWoValue4 As Global.System.Nullable(Of Integer),
                    ByVal TopWoValue5 As Global.System.Nullable(Of Integer),
                    ByVal Qhelp1 As Global.System.Nullable(Of Integer),
                    ByVal Qhelp2 As Global.System.Nullable(Of Integer),
                    ByVal AvgMutable As Global.System.Nullable(Of Integer),
                    ByVal AllowancePerc As Global.System.Nullable(Of Double),
                    ByVal AllowanceDays As Global.System.Nullable(Of Integer),
                    ByVal DangerV As Global.System.Nullable(Of Integer),
                    ByVal Original_SalaryConstID As Integer,
                    ByVal Original_Wife As Global.System.Nullable(Of Double),
                    ByVal Original_Child1 As Global.System.Nullable(Of Double),
                    ByVal Original_Child2 As Global.System.Nullable(Of Double),
                    ByVal Original_Child3 As Global.System.Nullable(Of Double),
                    ByVal Original_OtherChild As Global.System.Nullable(Of Double),
                    ByVal Original_TSpecialize As Global.System.Nullable(Of Double),
                    ByVal Original_Specialize As Global.System.Nullable(Of Double),
                    ByVal Original_TypeSpecialize As Global.System.Nullable(Of Double),
                    ByVal Original_SocialInsurance As Global.System.Nullable(Of Double),
                    ByVal Original_CooperateBox As Global.System.Nullable(Of Double),
                    ByVal Original_CooperateBox1 As Global.System.Nullable(Of Double),
                    ByVal Original_CooperationWorkers As Global.System.Nullable(Of Double),
                    ByVal Original_EngCooperation As Global.System.Nullable(Of Double),
                    ByVal Original_habitation As Global.System.Nullable(Of Double),
                    ByVal Original_AssistBox As Global.System.Nullable(Of Double),
                    ByVal Original_Typo As Global.System.Nullable(Of Double),
                    ByVal Original_DeathAssist As Global.System.Nullable(Of Double),
                    ByVal Original_EndService As Global.System.Nullable(Of Double),
                    ByVal Original_EngFarm As Global.System.Nullable(Of Double),
                    ByVal Original_stipendInsurance As Global.System.Nullable(Of Double),
                    ByVal Original_TaxImmunity As Global.System.Nullable(Of Double),
                    ByVal Original_ControlID As Global.System.Nullable(Of Integer),
                    ByVal Original_CleanerCost As Global.System.Nullable(Of Integer),
                    ByVal Original_WorkerTax As String,
                    ByVal Original_ST1 As Global.System.Nullable(Of Double),
                    ByVal Original_ST2 As Global.System.Nullable(Of Double),
                    ByVal Original_ST3 As Global.System.Nullable(Of Double),
                    ByVal Original_ST4 As Global.System.Nullable(Of Double),
                    ByVal Original_ST5 As Global.System.Nullable(Of Double),
                    ByVal Original_ST6 As Global.System.Nullable(Of Double),
                    ByVal Original_ST7 As Global.System.Nullable(Of Double),
                    ByVal Original_ST8 As Global.System.Nullable(Of Double),
                    ByVal Original_ST9 As Global.System.Nullable(Of Double),
                    ByVal Original_ST10 As Global.System.Nullable(Of Double),
                    ByVal Original_ST11 As Global.System.Nullable(Of Double),
                    ByVal Original_ST12 As Global.System.Nullable(Of Double),
                    ByVal Original_ST13 As Global.System.Nullable(Of Double),
                    ByVal Original_T1 As Global.System.Nullable(Of Double),
                    ByVal Original_T2 As Global.System.Nullable(Of Double),
                    ByVal Original_T3 As Global.System.Nullable(Of Double),
                    ByVal Original_T4 As Global.System.Nullable(Of Double),
                    ByVal Original_T5 As Global.System.Nullable(Of Double),
                    ByVal Original_Manag As Global.System.Nullable(Of Integer),
                    ByVal Original_IdelDeathAssist As Global.System.Nullable(Of Boolean),
                    ByVal Original_Class1 As Global.System.Nullable(Of Integer),
                    ByVal Original_Class2 As Global.System.Nullable(Of Integer),
                    ByVal Original_Class3 As Global.System.Nullable(Of Integer),
                    ByVal Original_Class4 As Global.System.Nullable(Of Integer),
                    ByVal Original_Class5 As Global.System.Nullable(Of Integer),
                    ByVal Original_OldClass1 As Global.System.Nullable(Of Integer),
                    ByVal Original_OldClass2 As Global.System.Nullable(Of Integer),
                    ByVal Original_OldClass3 As Global.System.Nullable(Of Integer),
                    ByVal Original_OldClass4 As Global.System.Nullable(Of Integer),
                    ByVal Original_OldClass5 As Global.System.Nullable(Of Integer),
                    ByVal Original_OverWday As Global.System.Nullable(Of Decimal),
                    ByVal Original_OverWNight As Global.System.Nullable(Of Decimal),
                    ByVal Original_WorkOhr As Global.System.Nullable(Of Integer),
                    ByVal Original_IsOldEfficts As Global.System.Nullable(Of Boolean),
                    ByVal Original_TopWoValue1 As Global.System.Nullable(Of Integer),
                    ByVal Original_TopWoValue2 As Global.System.Nullable(Of Integer),
                    ByVal Original_TopWoValue3 As Global.System.Nullable(Of Integer),
                    ByVal Original_TopWoValue4 As Global.System.Nullable(Of Integer),
                    ByVal Original_TopWoValue5 As Global.System.Nullable(Of Integer),
                    ByVal Original_Qhelp1 As Global.System.Nullable(Of Integer),
                    ByVal Original_Qhelp2 As Global.System.Nullable(Of Integer),
                    ByVal Original_AvgMutable As Global.System.Nullable(Of Integer),
                    ByVal Original_AllowancePerc As Global.System.Nullable(Of Double),
                    ByVal Original_AllowanceDays As Global.System.Nullable(Of Integer),
                    ByVal Original_DangerV As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SalaryConstID, Integer)
            If (Wife.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Wife.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Child1.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Child1.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Child2.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Child2.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Child3.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Child3.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (OtherChild.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(OtherChild.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (TSpecialize.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(TSpecialize.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Specialize.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Specialize.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (TypeSpecialize.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(TypeSpecialize.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (SocialInsurance.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(SocialInsurance.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (CooperateBox.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(CooperateBox.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (CooperateBox1.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(CooperateBox1.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (CooperationWorkers.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(CooperationWorkers.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (EngCooperation.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(EngCooperation.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (habitation.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(habitation.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (AssistBox.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(AssistBox.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Typo.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Typo.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (DeathAssist.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(DeathAssist.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (EndService.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(EndService.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (EngFarm.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(EngFarm.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (stipendInsurance.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(stipendInsurance.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (TaxImmunity.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(TaxImmunity.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (ControlID.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(ControlID.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (CleanerCost.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(CleanerCost.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (WorkerTax Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(WorkerTax, String)
            End If
            If (ST1.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(ST1.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (ST2.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(ST2.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (ST3.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(ST3.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (ST4.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(ST4.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (ST5.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(ST5.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (ST6.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(ST6.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (ST7.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(ST7.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (ST8.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(ST8.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (ST9.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(ST9.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (ST10.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(ST10.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (ST11.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(ST11.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (ST12.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(ST12.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (ST13.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(ST13.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (T1.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(T1.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (T2.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(T2.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (T3.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(T3.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (T4.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(T4.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (T5.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(T5.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Manag.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Manag.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (IdelDeathAssist.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(IdelDeathAssist.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Class1.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Class1.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Class2.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Class2.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Class3.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Class3.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Class4.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Class4.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (Class5.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Class5.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (OldClass1.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(OldClass1.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (OldClass2.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(OldClass2.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (OldClass3.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(OldClass3.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (OldClass4.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(OldClass4.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (OldClass5.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(OldClass5.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (OverWday.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(OverWday.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (OverWNight.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(OverWNight.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (WorkOhr.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(WorkOhr.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (IsOldEfficts.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(IsOldEfficts.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (TopWoValue1.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(TopWoValue1.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (TopWoValue2.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(TopWoValue2.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (TopWoValue3.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(TopWoValue3.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (TopWoValue4.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(TopWoValue4.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (TopWoValue5.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(TopWoValue5.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (Qhelp1.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(Qhelp1.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (Qhelp2.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Qhelp2.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (AvgMutable.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(AvgMutable.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = Global.System.DBNull.Value
            End If
            If (AllowancePerc.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(AllowancePerc.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (AllowanceDays.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(AllowanceDays.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (DangerV.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(DangerV.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(70).Value = CType(Original_SalaryConstID, Integer)
            If (Original_Wife.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(Original_Wife.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(72).Value = Global.System.DBNull.Value
            End If
            If (Original_Child1.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(Original_Child1.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(74).Value = Global.System.DBNull.Value
            End If
            If (Original_Child2.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(Original_Child2.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(76).Value = Global.System.DBNull.Value
            End If
            If (Original_Child3.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(Original_Child3.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(78).Value = Global.System.DBNull.Value
            End If
            If (Original_OtherChild.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(Original_OtherChild.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(80).Value = Global.System.DBNull.Value
            End If
            If (Original_TSpecialize.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(Original_TSpecialize.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(82).Value = Global.System.DBNull.Value
            End If
            If (Original_Specialize.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(Original_Specialize.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(84).Value = Global.System.DBNull.Value
            End If
            If (Original_TypeSpecialize.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(Original_TypeSpecialize.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(86).Value = Global.System.DBNull.Value
            End If
            If (Original_SocialInsurance.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(Original_SocialInsurance.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(88).Value = Global.System.DBNull.Value
            End If
            If (Original_CooperateBox.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(Original_CooperateBox.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(90).Value = Global.System.DBNull.Value
            End If
            If (Original_CooperateBox1.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(Original_CooperateBox1.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(92).Value = Global.System.DBNull.Value
            End If
            If (Original_CooperationWorkers.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(Original_CooperationWorkers.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(94).Value = Global.System.DBNull.Value
            End If
            If (Original_EngCooperation.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(Original_EngCooperation.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(96).Value = Global.System.DBNull.Value
            End If
            If (Original_habitation.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(Original_habitation.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(98).Value = Global.System.DBNull.Value
            End If
            If (Original_AssistBox.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(Original_AssistBox.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(100).Value = Global.System.DBNull.Value
            End If
            If (Original_Typo.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(Original_Typo.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(102).Value = Global.System.DBNull.Value
            End If
            If (Original_DeathAssist.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(Original_DeathAssist.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(104).Value = Global.System.DBNull.Value
            End If
            If (Original_EndService.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(106).Value = CType(Original_EndService.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(106).Value = Global.System.DBNull.Value
            End If
            If (Original_EngFarm.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(Original_EngFarm.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(108).Value = Global.System.DBNull.Value
            End If
            If (Original_stipendInsurance.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(Original_stipendInsurance.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(110).Value = Global.System.DBNull.Value
            End If
            If (Original_TaxImmunity.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(111).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(Original_TaxImmunity.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(111).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(112).Value = Global.System.DBNull.Value
            End If
            If (Original_ControlID.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(Original_ControlID.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(114).Value = Global.System.DBNull.Value
            End If
            If (Original_CleanerCost.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(Original_CleanerCost.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(116).Value = Global.System.DBNull.Value
            End If
            If (Original_WorkerTax Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(118).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(118).Value = CType(Original_WorkerTax, String)
            End If
            If (Original_ST1.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(120).Value = CType(Original_ST1.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(120).Value = Global.System.DBNull.Value
            End If
            If (Original_ST2.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(122).Value = CType(Original_ST2.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(122).Value = Global.System.DBNull.Value
            End If
            If (Original_ST3.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(123).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(124).Value = CType(Original_ST3.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(123).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(124).Value = Global.System.DBNull.Value
            End If
            If (Original_ST4.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(125).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(126).Value = CType(Original_ST4.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(125).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(126).Value = Global.System.DBNull.Value
            End If
            If (Original_ST5.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(127).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(128).Value = CType(Original_ST5.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(127).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(128).Value = Global.System.DBNull.Value
            End If
            If (Original_ST6.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(129).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(130).Value = CType(Original_ST6.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(129).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(130).Value = Global.System.DBNull.Value
            End If
            If (Original_ST7.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(131).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(132).Value = CType(Original_ST7.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(131).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(132).Value = Global.System.DBNull.Value
            End If
            If (Original_ST8.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(133).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(134).Value = CType(Original_ST8.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(133).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(134).Value = Global.System.DBNull.Value
            End If
            If (Original_ST9.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(135).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(136).Value = CType(Original_ST9.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(135).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(136).Value = Global.System.DBNull.Value
            End If
            If (Original_ST10.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(137).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(138).Value = CType(Original_ST10.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(137).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(138).Value = Global.System.DBNull.Value
            End If
            If (Original_ST11.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(139).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(140).Value = CType(Original_ST11.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(139).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(140).Value = Global.System.DBNull.Value
            End If
            If (Original_ST12.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(141).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(142).Value = CType(Original_ST12.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(141).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(142).Value = Global.System.DBNull.Value
            End If
            If (Original_ST13.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(143).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(144).Value = CType(Original_ST13.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(143).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(144).Value = Global.System.DBNull.Value
            End If
            If (Original_T1.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(145).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(146).Value = CType(Original_T1.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(145).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(146).Value = Global.System.DBNull.Value
            End If
            If (Original_T2.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(147).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(148).Value = CType(Original_T2.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(147).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(148).Value = Global.System.DBNull.Value
            End If
            If (Original_T3.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(149).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(150).Value = CType(Original_T3.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(149).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(150).Value = Global.System.DBNull.Value
            End If
            If (Original_T4.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(151).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(152).Value = CType(Original_T4.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(151).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(152).Value = Global.System.DBNull.Value
            End If
            If (Original_T5.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(153).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(154).Value = CType(Original_T5.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(153).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(154).Value = Global.System.DBNull.Value
            End If
            If (Original_Manag.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(155).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(156).Value = CType(Original_Manag.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(155).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(156).Value = Global.System.DBNull.Value
            End If
            If (Original_IdelDeathAssist.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(157).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(158).Value = CType(Original_IdelDeathAssist.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(157).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(158).Value = Global.System.DBNull.Value
            End If
            If (Original_Class1.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(159).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(160).Value = CType(Original_Class1.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(159).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(160).Value = Global.System.DBNull.Value
            End If
            If (Original_Class2.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(161).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(162).Value = CType(Original_Class2.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(161).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(162).Value = Global.System.DBNull.Value
            End If
            If (Original_Class3.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(163).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(164).Value = CType(Original_Class3.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(163).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(164).Value = Global.System.DBNull.Value
            End If
            If (Original_Class4.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(165).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(166).Value = CType(Original_Class4.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(165).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(166).Value = Global.System.DBNull.Value
            End If
            If (Original_Class5.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(167).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(168).Value = CType(Original_Class5.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(167).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(168).Value = Global.System.DBNull.Value
            End If
            If (Original_OldClass1.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(169).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(170).Value = CType(Original_OldClass1.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(169).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(170).Value = Global.System.DBNull.Value
            End If
            If (Original_OldClass2.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(171).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(172).Value = CType(Original_OldClass2.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(171).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(172).Value = Global.System.DBNull.Value
            End If
            If (Original_OldClass3.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(173).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(174).Value = CType(Original_OldClass3.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(173).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(174).Value = Global.System.DBNull.Value
            End If
            If (Original_OldClass4.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(175).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(176).Value = CType(Original_OldClass4.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(175).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(176).Value = Global.System.DBNull.Value
            End If
            If (Original_OldClass5.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(177).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(178).Value = CType(Original_OldClass5.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(177).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(178).Value = Global.System.DBNull.Value
            End If
            If (Original_OverWday.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(179).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(180).Value = CType(Original_OverWday.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(179).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(180).Value = Global.System.DBNull.Value
            End If
            If (Original_OverWNight.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(181).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(182).Value = CType(Original_OverWNight.Value, Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(181).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(182).Value = Global.System.DBNull.Value
            End If
            If (Original_WorkOhr.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(183).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(184).Value = CType(Original_WorkOhr.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(183).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(184).Value = Global.System.DBNull.Value
            End If
            If (Original_IsOldEfficts.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(185).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(186).Value = CType(Original_IsOldEfficts.Value, Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(185).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(186).Value = Global.System.DBNull.Value
            End If
            If (Original_TopWoValue1.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(187).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(188).Value = CType(Original_TopWoValue1.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(187).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(188).Value = Global.System.DBNull.Value
            End If
            If (Original_TopWoValue2.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(189).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(190).Value = CType(Original_TopWoValue2.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(189).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(190).Value = Global.System.DBNull.Value
            End If
            If (Original_TopWoValue3.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(191).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(192).Value = CType(Original_TopWoValue3.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(191).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(192).Value = Global.System.DBNull.Value
            End If
            If (Original_TopWoValue4.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(193).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(194).Value = CType(Original_TopWoValue4.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(193).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(194).Value = Global.System.DBNull.Value
            End If
            If (Original_TopWoValue5.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(195).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(196).Value = CType(Original_TopWoValue5.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(195).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(196).Value = Global.System.DBNull.Value
            End If
            If (Original_Qhelp1.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(197).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(198).Value = CType(Original_Qhelp1.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(197).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(198).Value = Global.System.DBNull.Value
            End If
            If (Original_Qhelp2.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(199).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(200).Value = CType(Original_Qhelp2.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(199).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(200).Value = Global.System.DBNull.Value
            End If
            If (Original_AvgMutable.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(201).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(202).Value = CType(Original_AvgMutable.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(201).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(202).Value = Global.System.DBNull.Value
            End If
            If (Original_AllowancePerc.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(203).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(204).Value = CType(Original_AllowancePerc.Value, Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(203).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(204).Value = Global.System.DBNull.Value
            End If
            If (Original_AllowanceDays.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(205).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(206).Value = CType(Original_AllowanceDays.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(205).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(206).Value = Global.System.DBNull.Value
            End If
            If (Original_DangerV.HasValue = True) Then
                Me.Adapter.UpdateCommand.Parameters(207).Value = CType(0, Object)
                Me.Adapter.UpdateCommand.Parameters(208).Value = CType(Original_DangerV.Value, Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(207).Value = CType(1, Object)
                Me.Adapter.UpdateCommand.Parameters(208).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
        Public Overridable Overloads Function Update(
                    ByVal Wife As Global.System.Nullable(Of Double),
                    ByVal Child1 As Global.System.Nullable(Of Double),
                    ByVal Child2 As Global.System.Nullable(Of Double),
                    ByVal Child3 As Global.System.Nullable(Of Double),
                    ByVal OtherChild As Global.System.Nullable(Of Double),
                    ByVal TSpecialize As Global.System.Nullable(Of Double),
                    ByVal Specialize As Global.System.Nullable(Of Double),
                    ByVal TypeSpecialize As Global.System.Nullable(Of Double),
                    ByVal SocialInsurance As Global.System.Nullable(Of Double),
                    ByVal CooperateBox As Global.System.Nullable(Of Double),
                    ByVal CooperateBox1 As Global.System.Nullable(Of Double),
                    ByVal CooperationWorkers As Global.System.Nullable(Of Double),
                    ByVal EngCooperation As Global.System.Nullable(Of Double),
                    ByVal habitation As Global.System.Nullable(Of Double),
                    ByVal AssistBox As Global.System.Nullable(Of Double),
                    ByVal Typo As Global.System.Nullable(Of Double),
                    ByVal DeathAssist As Global.System.Nullable(Of Double),
                    ByVal EndService As Global.System.Nullable(Of Double),
                    ByVal EngFarm As Global.System.Nullable(Of Double),
                    ByVal stipendInsurance As Global.System.Nullable(Of Double),
                    ByVal TaxImmunity As Global.System.Nullable(Of Double),
                    ByVal ControlID As Global.System.Nullable(Of Integer),
                    ByVal CleanerCost As Global.System.Nullable(Of Integer),
                    ByVal WorkerTax As String,
                    ByVal ST1 As Global.System.Nullable(Of Double),
                    ByVal ST2 As Global.System.Nullable(Of Double),
                    ByVal ST3 As Global.System.Nullable(Of Double),
                    ByVal ST4 As Global.System.Nullable(Of Double),
                    ByVal ST5 As Global.System.Nullable(Of Double),
                    ByVal ST6 As Global.System.Nullable(Of Double),
                    ByVal ST7 As Global.System.Nullable(Of Double),
                    ByVal ST8 As Global.System.Nullable(Of Double),
                    ByVal ST9 As Global.System.Nullable(Of Double),
                    ByVal ST10 As Global.System.Nullable(Of Double),
                    ByVal ST11 As Global.System.Nullable(Of Double),
                    ByVal ST12 As Global.System.Nullable(Of Double),
                    ByVal ST13 As Global.System.Nullable(Of Double),
                    ByVal T1 As Global.System.Nullable(Of Double),
                    ByVal T2 As Global.System.Nullable(Of Double),
                    ByVal T3 As Global.System.Nullable(Of Double),
                    ByVal T4 As Global.System.Nullable(Of Double),
                    ByVal T5 As Global.System.Nullable(Of Double),
                    ByVal Manag As Global.System.Nullable(Of Integer),
                    ByVal IdelDeathAssist As Global.System.Nullable(Of Boolean),
                    ByVal Class1 As Global.System.Nullable(Of Integer),
                    ByVal Class2 As Global.System.Nullable(Of Integer),
                    ByVal Class3 As Global.System.Nullable(Of Integer),
                    ByVal Class4 As Global.System.Nullable(Of Integer),
                    ByVal Class5 As Global.System.Nullable(Of Integer),
                    ByVal OldClass1 As Global.System.Nullable(Of Integer),
                    ByVal OldClass2 As Global.System.Nullable(Of Integer),
                    ByVal OldClass3 As Global.System.Nullable(Of Integer),
                    ByVal OldClass4 As Global.System.Nullable(Of Integer),
                    ByVal OldClass5 As Global.System.Nullable(Of Integer),
                    ByVal OverWday As Global.System.Nullable(Of Decimal),
                    ByVal OverWNight As Global.System.Nullable(Of Decimal),
                    ByVal WorkOhr As Global.System.Nullable(Of Integer),
                    ByVal IsOldEfficts As Global.System.Nullable(Of Boolean),
                    ByVal TopWoValue1 As Global.System.Nullable(Of Integer),
                    ByVal TopWoValue2 As Global.System.Nullable(Of Integer),
                    ByVal TopWoValue3 As Global.System.Nullable(Of Integer),
                    ByVal TopWoValue4 As Global.System.Nullable(Of Integer),
                    ByVal TopWoValue5 As Global.System.Nullable(Of Integer),
                    ByVal Qhelp1 As Global.System.Nullable(Of Integer),
                    ByVal Qhelp2 As Global.System.Nullable(Of Integer),
                    ByVal AvgMutable As Global.System.Nullable(Of Integer),
                    ByVal AllowancePerc As Global.System.Nullable(Of Double),
                    ByVal AllowanceDays As Global.System.Nullable(Of Integer),
                    ByVal DangerV As Global.System.Nullable(Of Integer),
                    ByVal Original_SalaryConstID As Integer,
                    ByVal Original_Wife As Global.System.Nullable(Of Double),
                    ByVal Original_Child1 As Global.System.Nullable(Of Double),
                    ByVal Original_Child2 As Global.System.Nullable(Of Double),
                    ByVal Original_Child3 As Global.System.Nullable(Of Double),
                    ByVal Original_OtherChild As Global.System.Nullable(Of Double),
                    ByVal Original_TSpecialize As Global.System.Nullable(Of Double),
                    ByVal Original_Specialize As Global.System.Nullable(Of Double),
                    ByVal Original_TypeSpecialize As Global.System.Nullable(Of Double),
                    ByVal Original_SocialInsurance As Global.System.Nullable(Of Double),
                    ByVal Original_CooperateBox As Global.System.Nullable(Of Double),
                    ByVal Original_CooperateBox1 As Global.System.Nullable(Of Double),
                    ByVal Original_CooperationWorkers As Global.System.Nullable(Of Double),
                    ByVal Original_EngCooperation As Global.System.Nullable(Of Double),
                    ByVal Original_habitation As Global.System.Nullable(Of Double),
                    ByVal Original_AssistBox As Global.System.Nullable(Of Double),
                    ByVal Original_Typo As Global.System.Nullable(Of Double),
                    ByVal Original_DeathAssist As Global.System.Nullable(Of Double),
                    ByVal Original_EndService As Global.System.Nullable(Of Double),
                    ByVal Original_EngFarm As Global.System.Nullable(Of Double),
                    ByVal Original_stipendInsurance As Global.System.Nullable(Of Double),
                    ByVal Original_TaxImmunity As Global.System.Nullable(Of Double),
                    ByVal Original_ControlID As Global.System.Nullable(Of Integer),
                    ByVal Original_CleanerCost As Global.System.Nullable(Of Integer),
                    ByVal Original_WorkerTax As String,
                    ByVal Original_ST1 As Global.System.Nullable(Of Double),
                    ByVal Original_ST2 As Global.System.Nullable(Of Double),
                    ByVal Original_ST3 As Global.System.Nullable(Of Double),
                    ByVal Original_ST4 As Global.System.Nullable(Of Double),
                    ByVal Original_ST5 As Global.System.Nullable(Of Double),
                    ByVal Original_ST6 As Global.System.Nullable(Of Double),
                    ByVal Original_ST7 As Global.System.Nullable(Of Double),
                    ByVal Original_ST8 As Global.System.Nullable(Of Double),
                    ByVal Original_ST9 As Global.System.Nullable(Of Double),
                    ByVal Original_ST10 As Global.System.Nullable(Of Double),
                    ByVal Original_ST11 As Global.System.Nullable(Of Double),
                    ByVal Original_ST12 As Global.System.Nullable(Of Double),
                    ByVal Original_ST13 As Global.System.Nullable(Of Double),
                    ByVal Original_T1 As Global.System.Nullable(Of Double),
                    ByVal Original_T2 As Global.System.Nullable(Of Double),
                    ByVal Original_T3 As Global.System.Nullable(Of Double),
                    ByVal Original_T4 As Global.System.Nullable(Of Double),
                    ByVal Original_T5 As Global.System.Nullable(Of Double),
                    ByVal Original_Manag As Global.System.Nullable(Of Integer),
                    ByVal Original_IdelDeathAssist As Global.System.Nullable(Of Boolean),
                    ByVal Original_Class1 As Global.System.Nullable(Of Integer),
                    ByVal Original_Class2 As Global.System.Nullable(Of Integer),
                    ByVal Original_Class3 As Global.System.Nullable(Of Integer),
                    ByVal Original_Class4 As Global.System.Nullable(Of Integer),
                    ByVal Original_Class5 As Global.System.Nullable(Of Integer),
                    ByVal Original_OldClass1 As Global.System.Nullable(Of Integer),
                    ByVal Original_OldClass2 As Global.System.Nullable(Of Integer),
                    ByVal Original_OldClass3 As Global.System.Nullable(Of Integer),
                    ByVal Original_OldClass4 As Global.System.Nullable(Of Integer),
                    ByVal Original_OldClass5 As Global.System.Nullable(Of Integer),
                    ByVal Original_OverWday As Global.System.Nullable(Of Decimal),
                    ByVal Original_OverWNight As Global.System.Nullable(Of Decimal),
                    ByVal Original_WorkOhr As Global.System.Nullable(Of Integer),
                    ByVal Original_IsOldEfficts As Global.System.Nullable(Of Boolean),
                    ByVal Original_TopWoValue1 As Global.System.Nullable(Of Integer),
                    ByVal Original_TopWoValue2 As Global.System.Nullable(Of Integer),
                    ByVal Original_TopWoValue3 As Global.System.Nullable(Of Integer),
                    ByVal Original_TopWoValue4 As Global.System.Nullable(Of Integer),
                    ByVal Original_TopWoValue5 As Global.System.Nullable(Of Integer),
                    ByVal Original_Qhelp1 As Global.System.Nullable(Of Integer),
                    ByVal Original_Qhelp2 As Global.System.Nullable(Of Integer),
                    ByVal Original_AvgMutable As Global.System.Nullable(Of Integer),
                    ByVal Original_AllowancePerc As Global.System.Nullable(Of Double),
                    ByVal Original_AllowanceDays As Global.System.Nullable(Of Integer),
                    ByVal Original_DangerV As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_SalaryConstID, Wife, Child1, Child2, Child3, OtherChild, TSpecialize, Specialize, TypeSpecialize, SocialInsurance, CooperateBox, CooperateBox1, CooperationWorkers, EngCooperation, habitation, AssistBox, Typo, DeathAssist, EndService, EngFarm, stipendInsurance, TaxImmunity, ControlID, CleanerCost, WorkerTax, ST1, ST2, ST3, ST4, ST5, ST6, ST7, ST8, ST9, ST10, ST11, ST12, ST13, T1, T2, T3, T4, T5, Manag, IdelDeathAssist, Class1, Class2, Class3, Class4, Class5, OldClass1, OldClass2, OldClass3, OldClass4, OldClass5, OverWday, OverWNight, WorkOhr, IsOldEfficts, TopWoValue1, TopWoValue2, TopWoValue3, TopWoValue4, TopWoValue5, Qhelp1, Qhelp2, AvgMutable, AllowancePerc, AllowanceDays, DangerV, Original_SalaryConstID, Original_Wife, Original_Child1, Original_Child2, Original_Child3, Original_OtherChild, Original_TSpecialize, Original_Specialize, Original_TypeSpecialize, Original_SocialInsurance, Original_CooperateBox, Original_CooperateBox1, Original_CooperationWorkers, Original_EngCooperation, Original_habitation, Original_AssistBox, Original_Typo, Original_DeathAssist, Original_EndService, Original_EngFarm, Original_stipendInsurance, Original_TaxImmunity, Original_ControlID, Original_CleanerCost, Original_WorkerTax, Original_ST1, Original_ST2, Original_ST3, Original_ST4, Original_ST5, Original_ST6, Original_ST7, Original_ST8, Original_ST9, Original_ST10, Original_ST11, Original_ST12, Original_ST13, Original_T1, Original_T2, Original_T3, Original_T4, Original_T5, Original_Manag, Original_IdelDeathAssist, Original_Class1, Original_Class2, Original_Class3, Original_Class4, Original_Class5, Original_OldClass1, Original_OldClass2, Original_OldClass3, Original_OldClass4, Original_OldClass5, Original_OverWday, Original_OverWNight, Original_WorkOhr, Original_IsOldEfficts, Original_TopWoValue1, Original_TopWoValue2, Original_TopWoValue3, Original_TopWoValue4, Original_TopWoValue5, Original_Qhelp1, Original_Qhelp2, Original_AvgMutable, Original_AllowancePerc, Original_AllowanceDays, Original_DangerV)
        End Function
    End Class

    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),
     Global.System.ComponentModel.ToolboxItem(True),
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" &
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component

        Private _updateOrder As UpdateOrderOption

        Private _setupTaxTableAdapter As SetupTaxTableAdapter

        Private _typeSpecializeValuesTableAdapter As TypeSpecializeValuesTableAdapter

        Private _mutableSettingTableAdapter As MutableSettingTableAdapter

        Private _specializeValuesTableAdapter As SpecializeValuesTableAdapter

        Private _salaryConstantsTableAdapter As SalaryConstantsTableAdapter

        Private _backupDataSetBeforeUpdate As Boolean

        Private _connection As Global.System.Data.IDbConnection

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" &
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" &
            "a", "System.Drawing.Design.UITypeEditor")>
        Public Property SetupTaxTableAdapter() As SetupTaxTableAdapter
            Get
                Return Me._setupTaxTableAdapter
            End Get
            Set
                Me._setupTaxTableAdapter = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" &
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" &
            "a", "System.Drawing.Design.UITypeEditor")>
        Public Property TypeSpecializeValuesTableAdapter() As TypeSpecializeValuesTableAdapter
            Get
                Return Me._typeSpecializeValuesTableAdapter
            End Get
            Set
                Me._typeSpecializeValuesTableAdapter = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" &
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" &
            "a", "System.Drawing.Design.UITypeEditor")>
        Public Property MutableSettingTableAdapter() As MutableSettingTableAdapter
            Get
                Return Me._mutableSettingTableAdapter
            End Get
            Set
                Me._mutableSettingTableAdapter = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" &
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" &
            "a", "System.Drawing.Design.UITypeEditor")>
        Public Property SpecializeValuesTableAdapter() As SpecializeValuesTableAdapter
            Get
                Return Me._specializeValuesTableAdapter
            End Get
            Set
                Me._specializeValuesTableAdapter = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" &
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" &
            "a", "System.Drawing.Design.UITypeEditor")>
        Public Property SalaryConstantsTableAdapter() As SalaryConstantsTableAdapter
            Get
                Return Me._salaryConstantsTableAdapter
            End Get
            Set
                Me._salaryConstantsTableAdapter = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Browsable(False)>
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._setupTaxTableAdapter) Is Nothing) _
                            AndAlso (Not (Me._setupTaxTableAdapter.Connection) Is Nothing)) Then
                    Return Me._setupTaxTableAdapter.Connection
                End If
                If ((Not (Me._typeSpecializeValuesTableAdapter) Is Nothing) _
                            AndAlso (Not (Me._typeSpecializeValuesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._typeSpecializeValuesTableAdapter.Connection
                End If
                If ((Not (Me._mutableSettingTableAdapter) Is Nothing) _
                            AndAlso (Not (Me._mutableSettingTableAdapter.Connection) Is Nothing)) Then
                    Return Me._mutableSettingTableAdapter.Connection
                End If
                If ((Not (Me._specializeValuesTableAdapter) Is Nothing) _
                            AndAlso (Not (Me._specializeValuesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._specializeValuesTableAdapter.Connection
                End If
                If ((Not (Me._salaryConstantsTableAdapter) Is Nothing) _
                            AndAlso (Not (Me._salaryConstantsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._salaryConstantsTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Browsable(False)>
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._setupTaxTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._typeSpecializeValuesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._mutableSettingTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._specializeValuesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._salaryConstantsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property

        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Function UpdateUpdatedRows(ByVal dataSet As SetupSalaryDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._setupTaxTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SetupTax.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing) _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._setupTaxTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._typeSpecializeValuesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TypeSpecializeValues.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing) _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._typeSpecializeValuesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._mutableSettingTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.MutableSetting.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing) _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mutableSettingTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._specializeValuesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SpecializeValues.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing) _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._specializeValuesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._salaryConstantsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SalaryConstants.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing) _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._salaryConstantsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function

        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Function UpdateInsertedRows(ByVal dataSet As SetupSalaryDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._setupTaxTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SetupTax.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing) _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._setupTaxTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._typeSpecializeValuesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TypeSpecializeValues.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing) _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._typeSpecializeValuesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._mutableSettingTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.MutableSetting.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing) _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mutableSettingTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._specializeValuesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SpecializeValues.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing) _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._specializeValuesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._salaryConstantsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SalaryConstants.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing) _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._salaryConstantsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function

        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Function UpdateDeletedRows(ByVal dataSet As SetupSalaryDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._salaryConstantsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SalaryConstants.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing) _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._salaryConstantsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._specializeValuesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SpecializeValues.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing) _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._specializeValuesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._mutableSettingTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.MutableSetting.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing) _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mutableSettingTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._typeSpecializeValuesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TypeSpecializeValues.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing) _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._typeSpecializeValuesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._setupTaxTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SetupTax.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing) _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._setupTaxTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function

        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing) _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing) _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = False) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function

        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overridable Function UpdateAll(ByVal dataSet As SetupSalaryDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = False) Then
                Return 0
            End If
            If ((Not (Me._setupTaxTableAdapter) Is Nothing) _
                        AndAlso (Me.MatchTableAdapterConnection(Me._setupTaxTableAdapter.Connection) = False)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" &
                        "tring.")
            End If
            If ((Not (Me._typeSpecializeValuesTableAdapter) Is Nothing) _
                        AndAlso (Me.MatchTableAdapterConnection(Me._typeSpecializeValuesTableAdapter.Connection) = False)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" &
                        "tring.")
            End If
            If ((Not (Me._mutableSettingTableAdapter) Is Nothing) _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mutableSettingTableAdapter.Connection) = False)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" &
                        "tring.")
            End If
            If ((Not (Me._specializeValuesTableAdapter) Is Nothing) _
                        AndAlso (Me.MatchTableAdapterConnection(Me._specializeValuesTableAdapter.Connection) = False)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" &
                        "tring.")
            End If
            If ((Not (Me._salaryConstantsTableAdapter) Is Nothing) _
                        AndAlso (Me.MatchTableAdapterConnection(Me._salaryConstantsTableAdapter.Connection) = False)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" &
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" &
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = False
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken) _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = True
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" &
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try
                '---- Prepare for update -----------
                '
                If (Not (Me._setupTaxTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._setupTaxTableAdapter, Me._setupTaxTableAdapter.Connection)
                    Me._setupTaxTableAdapter.Connection = CType(workConnection, Global.System.Data.SqlClient.SqlConnection)
                    Me._setupTaxTableAdapter.Transaction = CType(workTransaction, Global.System.Data.SqlClient.SqlTransaction)
                    If Me._setupTaxTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._setupTaxTableAdapter.Adapter.AcceptChangesDuringUpdate = False
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._setupTaxTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._typeSpecializeValuesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._typeSpecializeValuesTableAdapter, Me._typeSpecializeValuesTableAdapter.Connection)
                    Me._typeSpecializeValuesTableAdapter.Connection = CType(workConnection, Global.System.Data.SqlClient.SqlConnection)
                    Me._typeSpecializeValuesTableAdapter.Transaction = CType(workTransaction, Global.System.Data.SqlClient.SqlTransaction)
                    If Me._typeSpecializeValuesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._typeSpecializeValuesTableAdapter.Adapter.AcceptChangesDuringUpdate = False
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._typeSpecializeValuesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._mutableSettingTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mutableSettingTableAdapter, Me._mutableSettingTableAdapter.Connection)
                    Me._mutableSettingTableAdapter.Connection = CType(workConnection, Global.System.Data.SqlClient.SqlConnection)
                    Me._mutableSettingTableAdapter.Transaction = CType(workTransaction, Global.System.Data.SqlClient.SqlTransaction)
                    If Me._mutableSettingTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mutableSettingTableAdapter.Adapter.AcceptChangesDuringUpdate = False
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mutableSettingTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._specializeValuesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._specializeValuesTableAdapter, Me._specializeValuesTableAdapter.Connection)
                    Me._specializeValuesTableAdapter.Connection = CType(workConnection, Global.System.Data.SqlClient.SqlConnection)
                    Me._specializeValuesTableAdapter.Transaction = CType(workTransaction, Global.System.Data.SqlClient.SqlTransaction)
                    If Me._specializeValuesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._specializeValuesTableAdapter.Adapter.AcceptChangesDuringUpdate = False
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._specializeValuesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._salaryConstantsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._salaryConstantsTableAdapter, Me._salaryConstantsTableAdapter.Connection)
                    Me._salaryConstantsTableAdapter.Connection = CType(workConnection, Global.System.Data.SqlClient.SqlConnection)
                    Me._salaryConstantsTableAdapter.Transaction = CType(workTransaction, Global.System.Data.SqlClient.SqlTransaction)
                    If Me._salaryConstantsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._salaryConstantsTableAdapter.Adapter.AcceptChangesDuringUpdate = False
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._salaryConstantsTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._setupTaxTableAdapter) Is Nothing) Then
                    Me._setupTaxTableAdapter.Connection = CType(revertConnections(Me._setupTaxTableAdapter), Global.System.Data.SqlClient.SqlConnection)
                    Me._setupTaxTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._typeSpecializeValuesTableAdapter) Is Nothing) Then
                    Me._typeSpecializeValuesTableAdapter.Connection = CType(revertConnections(Me._typeSpecializeValuesTableAdapter), Global.System.Data.SqlClient.SqlConnection)
                    Me._typeSpecializeValuesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._mutableSettingTableAdapter) Is Nothing) Then
                    Me._mutableSettingTableAdapter.Connection = CType(revertConnections(Me._mutableSettingTableAdapter), Global.System.Data.SqlClient.SqlConnection)
                    Me._mutableSettingTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._specializeValuesTableAdapter) Is Nothing) Then
                    Me._specializeValuesTableAdapter.Connection = CType(revertConnections(Me._specializeValuesTableAdapter), Global.System.Data.SqlClient.SqlConnection)
                    Me._specializeValuesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._salaryConstantsTableAdapter) Is Nothing) Then
                    Me._salaryConstantsTableAdapter.Connection = CType(revertConnections(Me._salaryConstantsTableAdapter), Global.System.Data.SqlClient.SqlConnection)
                    Me._salaryConstantsTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = True
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return True
            End If
            If ((Me.Connection Is Nothing) _
                        OrElse (inputConnection Is Nothing)) Then
                Return True
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return True
            End If
            Return False
        End Function

        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Enum UpdateOrderOption

            InsertUpdateDelete = 0

            UpdateInsertDelete = 1
        End Enum

        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)

            Private _relation As Global.System.Data.DataRelation

            Private _childFirst As Integer

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing) _
                            AndAlso (traversedRows.ContainsKey(parent) = False))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing) _
                                AndAlso (traversedRows.ContainsKey(parent) = False))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
